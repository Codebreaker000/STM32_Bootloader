
Example_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d58  08006d58  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d60  08006d60  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c08  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d04  20001d04  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d714  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a0e  00000000  00000000  0002d883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b58  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000085a  00000000  00000000  00030df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000226e6  00000000  00000000  0003164a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f420  00000000  00000000  00053d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3fe7  00000000  00000000  00063150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002cec  00000000  00000000  00127138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00129e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ce8 	.word	0x08006ce8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006ce8 	.word	0x08006ce8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9c0 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f826 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f88e 	bl	80005f0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f005 fee8 	bl	80062a8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80004d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <main+0x50>)
 80004de:	f000 fd2a 	bl	8000f36 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);  // Blink delay
 80004e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e6:	f000 fa23 	bl	8000930 <HAL_Delay>

	  if (HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin) == GPIO_PIN_SET) {
 80004ea:	2101      	movs	r1, #1
 80004ec:	480a      	ldr	r0, [pc, #40]	; (8000518 <main+0x54>)
 80004ee:	f000 fcf1 	bl	8000ed4 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d1ef      	bne.n	80004d8 <main+0x14>
		  // Indicate application start
		  HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port, ORANGE_LED_Pin, GPIO_PIN_SET);  // Turn on LED2
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x50>)
 8000500:	f000 fd00 	bl	8000f04 <HAL_GPIO_WritePin>

		  HAL_Delay(500);  // Small delay before jumping
 8000504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000508:	f000 fa12 	bl	8000930 <HAL_Delay>
		  jump_to_application();
 800050c:	f000 f8d0 	bl	80006b0 <jump_to_application>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000510:	e7e2      	b.n	80004d8 <main+0x14>
 8000512:	bf00      	nop
 8000514:	40020c00 	.word	0x40020c00
 8000518:	40020000 	.word	0x40020000

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fbb0 	bl	8006c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 ff35 	bl	8002410 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f8b0 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2105      	movs	r1, #5
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f996 	bl	8002900 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f899 	bl	8000710 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_GPIO_Init+0xb4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <MX_GPIO_Init+0xb4>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000660:	4811      	ldr	r0, [pc, #68]	; (80006a8 <MX_GPIO_Init+0xb8>)
 8000662:	f000 fc4f 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_GPIO_Init+0xbc>)
 800067a:	f000 fa8f 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800067e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_GPIO_Init+0xb8>)
 8000698:	f000 fa80 	bl	8000b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40020000 	.word	0x40020000

080006b0 <jump_to_application>:

/* USER CODE BEGIN 4 */

void  jump_to_application(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t appStack = *((volatile uint32_t*)APP_START_ADDRESS);
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <jump_to_application+0x50>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	60fb      	str	r3, [r7, #12]
	uint32_t appEntry = *((volatile uint32_t*)(APP_START_ADDRESS + 4));
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <jump_to_application+0x54>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	60bb      	str	r3, [r7, #8]

	// Check if application is valid (First word in application stack should not be 0xFFFFFFFF)
	if (appStack == 0xFFFFFFFF || appEntry == 0xFFFFFFFF) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c8:	d015      	beq.n	80006f6 <jump_to_application+0x46>
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d011      	beq.n	80006f6 <jump_to_application+0x46>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d2:	b672      	cpsid	i
}
 80006d4:	bf00      	nop
		return; // Stay in bootloader
	}

	__disable_irq(); // Disable interrupts
	SCB->VTOR = APP_START_ADDRESS; // Set vector table to application
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <jump_to_application+0x58>)
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <jump_to_application+0x50>)
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f383 8808 	msr	MSP, r3
}
 80006e6:	bf00      	nop

	__set_MSP(appStack); // Set stack pointer to application

	JumpToApp = (pFunction)appEntry;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <jump_to_application+0x5c>)
 80006ec:	6013      	str	r3, [r2, #0]

	JumpToApp(); // Jump to application
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <jump_to_application+0x5c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4798      	blx	r3
 80006f4:	e000      	b.n	80006f8 <jump_to_application+0x48>
		return; // Stay in bootloader
 80006f6:	bf00      	nop
}
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	08008000 	.word	0x08008000
 8000704:	08008004 	.word	0x08008004
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	20000118 	.word	0x20000118

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <HAL_MspInit+0x4c>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x4c>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800075a:	2007      	movs	r0, #7
 800075c:	f000 f9dc 	bl	8000b18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f89a 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <OTG_FS_IRQHandler+0x10>)
 80007c6:	f000 fd14 	bl	80011f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20001600 	.word	0x20001600

080007d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000830 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007fc:	f7ff ffea 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	; (8000838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f006 fa3b 	bl	8006ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff fe4b 	bl	80004c4 <main>
  bx  lr    
 800082e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800083c:	08006d68 	.word	0x08006d68
  ldr r2, =_sbss
 8000840:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000844:	20001d04 	.word	0x20001d04

08000848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <HAL_Init+0x40>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_Init+0x40>)
 8000862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x40>)
 800086e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f94f 	bl	8000b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff ff4c 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f967 	bl	8000b82 <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f92f 	bl	8000b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	2000011c 	.word	0x2000011c

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000011c 	.word	0x2000011c

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff ffee 	bl	8000918 <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffde 	bl	8000918 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <__NVIC_EnableIRQ+0x38>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae4:	d301      	bcc.n	8000aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00f      	b.n	8000b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <SysTick_Config+0x40>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af2:	210f      	movs	r1, #15
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f7ff ff8e 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <SysTick_Config+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SysTick_Config+0x40>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff29 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff3e 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff8e 	bl	8000a6c <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5d 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff31 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa2 	bl	8000ad4 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e16b      	b.n	8000e90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 815a 	bne.w	8000e8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d005      	beq.n	8000bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d130      	bne.n	8000c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	f003 0201 	and.w	r2, r3, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d017      	beq.n	8000c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d123      	bne.n	8000ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	69b9      	ldr	r1, [r7, #24]
 8000cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0203 	and.w	r2, r3, #3
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 80b4 	beq.w	8000e8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b60      	ldr	r3, [pc, #384]	; (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3e:	4a5b      	ldr	r2, [pc, #364]	; (8000eac <HAL_GPIO_Init+0x310>)
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a52      	ldr	r2, [pc, #328]	; (8000eb0 <HAL_GPIO_Init+0x314>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d02b      	beq.n	8000dc2 <HAL_GPIO_Init+0x226>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a51      	ldr	r2, [pc, #324]	; (8000eb4 <HAL_GPIO_Init+0x318>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d025      	beq.n	8000dbe <HAL_GPIO_Init+0x222>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <HAL_GPIO_Init+0x31c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01f      	beq.n	8000dba <HAL_GPIO_Init+0x21e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d019      	beq.n	8000db6 <HAL_GPIO_Init+0x21a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4e      	ldr	r2, [pc, #312]	; (8000ec0 <HAL_GPIO_Init+0x324>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0x216>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4d      	ldr	r2, [pc, #308]	; (8000ec4 <HAL_GPIO_Init+0x328>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <HAL_GPIO_Init+0x212>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <HAL_GPIO_Init+0x32c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d007      	beq.n	8000daa <HAL_GPIO_Init+0x20e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ecc <HAL_GPIO_Init+0x330>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_GPIO_Init+0x20a>
 8000da2:	2307      	movs	r3, #7
 8000da4:	e00e      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000da6:	2308      	movs	r3, #8
 8000da8:	e00c      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000daa:	2306      	movs	r3, #6
 8000dac:	e00a      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dae:	2305      	movs	r3, #5
 8000db0:	e008      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000db2:	2304      	movs	r3, #4
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000db6:	2303      	movs	r3, #3
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	f002 0203 	and.w	r2, r2, #3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd4:	4935      	ldr	r1, [pc, #212]	; (8000eac <HAL_GPIO_Init+0x310>)
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de2:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e06:	4a32      	ldr	r2, [pc, #200]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	f67f ae90 	bls.w	8000bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40021400 	.word	0x40021400
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40021c00 	.word	0x40021c00
 8000ed0:	40013c00 	.word	0x40013c00

08000ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e001      	b.n	8000ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	4613      	mov	r3, r2
 8000f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	400b      	ands	r3, r1
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af02      	add	r7, sp, #8
 8000f70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e101      	b.n	8001180 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f005 fb66 	bl	8006668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000faa:	d102      	bne.n	8000fb2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 ffb1 	bl	8002f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7c1a      	ldrb	r2, [r3, #16]
 8000fc4:	f88d 2000 	strb.w	r2, [sp]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fcc:	f001 fe90 	bl	8002cf0 <USB_CoreInit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0ce      	b.n	8001180 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 ffa9 	bl	8002f40 <USB_SetCurrentMode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0bf      	b.n	8001180 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e04a      	b.n	800109c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	3315      	adds	r3, #21
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3314      	adds	r3, #20
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	b298      	uxth	r0, r3
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	332e      	adds	r3, #46	; 0x2e
 8001042:	4602      	mov	r2, r0
 8001044:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	3318      	adds	r3, #24
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	331c      	adds	r3, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3320      	adds	r3, #32
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3324      	adds	r3, #36	; 0x24
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3af      	bcc.n	8001006 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e044      	b.n	8001136 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	f203 2355 	addw	r3, r3, #597	; 0x255
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3b5      	bcc.n	80010ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7c1a      	ldrb	r2, [r3, #16]
 8001148:	f88d 2000 	strb.w	r2, [sp]
 800114c:	3304      	adds	r3, #4
 800114e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001150:	f001 ff42 	bl	8002fd8 <USB_DevInit>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2202      	movs	r2, #2
 800115e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00c      	b.n	8001180 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 ff8c 	bl	8004096 <USB_DevDisconnect>

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_PCD_Start+0x1c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e022      	b.n	80011ea <HAL_PCD_Start+0x62>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fe93 	bl	8002efc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 ff3a 	bl	8004054 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011f2:	b590      	push	{r4, r7, lr}
 80011f4:	b08d      	sub	sp, #52	; 0x34
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fff8 	bl	80041fe <USB_GetMode>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 848c 	bne.w	8001b2e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 ff5c 	bl	80040d8 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8482 	beq.w	8001b2c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f002 ff49 	bl	80040d8 <USB_ReadInterrupts>
 8001246:	4603      	mov	r3, r0
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d107      	bne.n	8001260 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f002 0202 	and.w	r2, r2, #2
 800125e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f002 ff37 	bl	80040d8 <USB_ReadInterrupts>
 800126a:	4603      	mov	r3, r0
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b10      	cmp	r3, #16
 8001272:	d161      	bne.n	8001338 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0210 	bic.w	r2, r2, #16
 8001282:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f003 020f 	and.w	r2, r3, #15
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	3304      	adds	r3, #4
 80012a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	0c5b      	lsrs	r3, r3, #17
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d124      	bne.n	80012fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d035      	beq.n	8001328 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	6a38      	ldr	r0, [r7, #32]
 80012d0:	f002 fd6e 	bl	8003db0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e0:	441a      	add	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f2:	441a      	add	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	e016      	b.n	8001328 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	0c5b      	lsrs	r3, r3, #17
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	2b06      	cmp	r3, #6
 8001304:	d110      	bne.n	8001328 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	6a38      	ldr	r0, [r7, #32]
 8001312:	f002 fd4d 	bl	8003db0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001322:	441a      	add	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0210 	orr.w	r2, r2, #16
 8001336:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fecb 	bl	80040d8 <USB_ReadInterrupts>
 8001342:	4603      	mov	r3, r0
 8001344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800134c:	f040 80a7 	bne.w	800149e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fed0 	bl	80040fe <USB_ReadDevAllOutEpInterrupt>
 800135e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001360:	e099      	b.n	8001496 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 808e 	beq.w	800148a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fef4 	bl	8004166 <USB_ReadDevOutEPInterrupt>
 800137e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001396:	461a      	mov	r2, r3
 8001398:	2301      	movs	r3, #1
 800139a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800139c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fea4 	bl	80020ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00c      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ba:	461a      	mov	r2, r3
 80013bc:	2308      	movs	r3, #8
 80013be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 ff7a 	bl	80022bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013de:	461a      	mov	r2, r3
 80013e0:	2310      	movs	r3, #16
 80013e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d030      	beq.n	8001450 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	2b80      	cmp	r3, #128	; 0x80
 80013f8:	d109      	bne.n	800140e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	3304      	adds	r3, #4
 8001422:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d108      	bne.n	800143e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2200      	movs	r2, #0
 8001430:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f005 fa1b 	bl	8006874 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144a:	461a      	mov	r2, r3
 800144c:	2302      	movs	r3, #2
 800144e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001466:	461a      	mov	r2, r3
 8001468:	2320      	movs	r3, #32
 800146a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001482:	461a      	mov	r2, r3
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	f47f af62 	bne.w	8001362 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fe18 	bl	80040d8 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b2:	f040 80db 	bne.w	800166c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fe39 	bl	8004132 <USB_ReadDevAllInEpInterrupt>
 80014c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014c6:	e0cd      	b.n	8001664 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80c2 	beq.w	8001658 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fe5f 	bl	80041a2 <USB_ReadDevInEPInterrupt>
 80014e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d057      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	2201      	movs	r2, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	69f9      	ldr	r1, [r7, #28]
 800150c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001510:	4013      	ands	r3, r2
 8001512:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001520:	461a      	mov	r2, r3
 8001522:	2301      	movs	r3, #1
 8001524:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	799b      	ldrb	r3, [r3, #6]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d132      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3320      	adds	r3, #32
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4403      	add	r3, r0
 800154e:	331c      	adds	r3, #28
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4419      	add	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	3320      	adds	r3, #32
 8001564:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3324      	adds	r3, #36	; 0x24
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d108      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800158c:	461a      	mov	r2, r3
 800158e:	2101      	movs	r1, #1
 8001590:	f002 fe66 	bl	8004260 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f005 f8e5 	bl	800676a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b6:	461a      	mov	r2, r3
 80015b8:	2308      	movs	r3, #8
 80015ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d2:	461a      	mov	r2, r3
 80015d4:	2310      	movs	r3, #16
 80015d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001600:	6a38      	ldr	r0, [r7, #32]
 8001602:	f001 fe4d 	bl	80032a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	3310      	adds	r3, #16
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	3304      	adds	r3, #4
 8001618:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	78db      	ldrb	r3, [r3, #3]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d108      	bne.n	8001634 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2200      	movs	r2, #0
 8001626:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f005 f932 	bl	8006898 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001640:	461a      	mov	r2, r3
 8001642:	2302      	movs	r3, #2
 8001644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fcbd 	bl	8001fd2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	3301      	adds	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	2b00      	cmp	r3, #0
 8001668:	f47f af2e 	bne.w	80014c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fd31 	bl	80040d8 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800167c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001680:	d122      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fea4 	bl	80023f8 <HAL_PCDEx_LPM_Callback>
 80016b0:	e002      	b.n	80016b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f005 f8d0 	bl	8006858 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fd03 	bl	80040d8 <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016dc:	d112      	bne.n	8001704 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f005 f88c 	bl	800680c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001702:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fce5 	bl	80040d8 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001718:	f040 80b7 	bne.w	800188a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2110      	movs	r1, #16
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fdb2 	bl	80032a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001740:	e046      	b.n	80017d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174e:	461a      	mov	r2, r3
 8001750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001754:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	0151      	lsls	r1, r2, #5
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	440a      	add	r2, r1
 800176c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	461a      	mov	r2, r3
 8001784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001788:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	0151      	lsls	r1, r2, #5
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	440a      	add	r2, r1
 80017a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	0151      	lsls	r1, r2, #5
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	440a      	add	r2, r1
 80017c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	3301      	adds	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	461a      	mov	r2, r3
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	4293      	cmp	r3, r2
 80017da:	d3b2      	bcc.n	8001742 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7bdb      	ldrb	r3, [r3, #15]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d016      	beq.n	8001826 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001808:	f043 030b 	orr.w	r3, r3, #11
 800180c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181e:	f043 030b 	orr.w	r3, r3, #11
 8001822:	6453      	str	r3, [r2, #68]	; 0x44
 8001824:	e015      	b.n	8001852 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001838:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800183c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184c:	f043 030b 	orr.w	r3, r3, #11
 8001850:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001860:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001864:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001874:	461a      	mov	r2, r3
 8001876:	f002 fcf3 	bl	8004260 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fc22 	bl	80040d8 <USB_ReadInterrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189e:	d123      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fcb8 	bl	800421a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fd6f 	bl	8003392 <USB_GetDevSpeed>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681c      	ldr	r4, [r3, #0]
 80018c0:	f001 fa0a 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 80018c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ca:	461a      	mov	r2, r3
 80018cc:	4620      	mov	r0, r4
 80018ce:	f001 fa73 	bl	8002db8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f004 ff71 	bl	80067ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fbf3 	bl	80040d8 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d10a      	bne.n	8001912 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f004 ff4e 	bl	800679e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f002 0208 	and.w	r2, r2, #8
 8001910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fbde 	bl	80040d8 <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b80      	cmp	r3, #128	; 0x80
 8001924:	d123      	bne.n	800196e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001932:	2301      	movs	r3, #1
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
 8001936:	e014      	b.n	8001962 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	f203 2357 	addw	r3, r3, #599	; 0x257
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fb0a 	bl	8001f70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3301      	adds	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	791b      	ldrb	r3, [r3, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	4293      	cmp	r3, r2
 800196c:	d3e4      	bcc.n	8001938 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fbb0 	bl	80040d8 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001982:	d13c      	bne.n	80019fe <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001984:	2301      	movs	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
 8001988:	e02b      	b.n	80019e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	3318      	adds	r3, #24
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d115      	bne.n	80019dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da12      	bge.n	80019dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3317      	adds	r3, #23
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 faca 	bl	8001f70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	3301      	adds	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	791b      	ldrb	r3, [r3, #4]
 80019e6:	461a      	mov	r2, r3
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d3cd      	bcc.n	800198a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fb68 	bl	80040d8 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a12:	d156      	bne.n	8001ac2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a14:	2301      	movs	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	e045      	b.n	8001aa6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12e      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da2b      	bge.n	8001aa0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001a54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d121      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9c:	6053      	str	r3, [r2, #4]
            break;
 8001a9e:	e008      	b.n	8001ab2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	791b      	ldrb	r3, [r3, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d3b3      	bcc.n	8001a1a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fb06 	bl	80040d8 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad6:	d10a      	bne.n	8001aee <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f004 feef 	bl	80068bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 faf0 	bl	80040d8 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d115      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f004 fedf 	bl	80068d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	e000      	b.n	8001b2e <HAL_PCD_IRQHandler+0x93c>
      return;
 8001b2c:	bf00      	nop
    }
  }
}
 8001b2e:	3734      	adds	r7, #52	; 0x34
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}

08001b34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_SetAddress+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e012      	b.n	8001b74 <HAL_PCD_SetAddress+0x40>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fa4f 	bl	8004008 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	70fb      	strb	r3, [r7, #3]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	803b      	strh	r3, [r7, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da0f      	bge.n	8001bc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	3310      	adds	r3, #16
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	705a      	strb	r2, [r3, #1]
 8001bc0:	e00f      	b.n	8001be2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001bee:	883b      	ldrh	r3, [r7, #0]
 8001bf0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	78ba      	ldrb	r2, [r7, #2]
 8001bfc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	785b      	ldrb	r3, [r3, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d102      	bne.n	8001c1c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_PCD_EP_Open+0xae>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e00e      	b.n	8001c48 <HAL_PCD_EP_Open+0xcc>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fbcf 	bl	80033dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001c46:	7afb      	ldrb	r3, [r7, #11]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da0f      	bge.n	8001c84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 020f 	and.w	r2, r3, #15
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	3310      	adds	r3, #16
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	705a      	strb	r2, [r3, #1]
 8001c82:	e00f      	b.n	8001ca4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	f003 020f 	and.w	r2, r3, #15
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_PCD_EP_Close+0x6e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e00e      	b.n	8001cdc <HAL_PCD_EP_Close+0x8c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 fc0d 	bl	80034ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	f003 020f 	and.w	r2, r3, #15
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2200      	movs	r2, #0
 8001d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	799b      	ldrb	r3, [r3, #6]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	799b      	ldrb	r3, [r3, #6]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6979      	ldr	r1, [r7, #20]
 8001d4c:	f001 fcaa 	bl	80036a4 <USB_EPStartXfer>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001d7c:	681b      	ldr	r3, [r3, #0]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	3310      	adds	r3, #16
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	799b      	ldrb	r3, [r3, #6]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	799b      	ldrb	r3, [r3, #6]
 8001dec:	461a      	mov	r2, r3
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	f001 fc58 	bl	80036a4 <USB_EPStartXfer>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	7912      	ldrb	r2, [r2, #4]
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04f      	b.n	8001ebc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da0f      	bge.n	8001e44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	f003 020f 	and.w	r2, r3, #15
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3310      	adds	r3, #16
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
 8001e42:	e00d      	b.n	8001e60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_EP_SetStall+0x82>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e01d      	b.n	8001ebc <HAL_PCD_EP_SetStall+0xbe>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 ffe6 	bl	8003e60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7999      	ldrb	r1, [r3, #6]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001eac:	461a      	mov	r2, r3
 8001eae:	f002 f9d7 	bl	8004260 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	7912      	ldrb	r2, [r2, #4]
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e042      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0f      	bge.n	8001f0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3310      	adds	r3, #16
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e00f      	b.n	8001f2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 020f 	and.w	r2, r3, #15
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_PCD_EP_ClrStall+0x86>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e00e      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0xa4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68f9      	ldr	r1, [r7, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 ffef 	bl	8003f3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da0c      	bge.n	8001f9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3310      	adds	r3, #16
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e00c      	b.n	8001fb8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 fe0e 	bl	8003be0 <USB_EPStopXfer>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b08a      	sub	sp, #40	; 0x28
 8001fd6:	af02      	add	r7, sp, #8
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d901      	bls.n	800200a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06b      	b.n	80020e2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	d902      	bls.n	8002026 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3303      	adds	r3, #3
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800202e:	e02a      	b.n	8002086 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	429a      	cmp	r2, r3
 8002044:	d902      	bls.n	800204c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3303      	adds	r3, #3
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68d9      	ldr	r1, [r3, #12]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4603      	mov	r3, r0
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f001 fe63 	bl	8003d34 <USB_WritePacket>

    ep->xfer_buff  += len;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	441a      	add	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	441a      	add	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	429a      	cmp	r2, r3
 800209a:	d809      	bhi.n	80020b0 <PCD_WriteEmptyTxFifo+0xde>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d203      	bcs.n	80020b0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1bf      	bne.n	8002030 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d811      	bhi.n	80020e0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	2201      	movs	r2, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	6939      	ldr	r1, [r7, #16]
 80020d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020dc:	4013      	ands	r3, r2
 80020de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	333c      	adds	r3, #60	; 0x3c
 8002104:	3304      	adds	r3, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	799b      	ldrb	r3, [r3, #6]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d17b      	bne.n	800221a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4a61      	ldr	r2, [pc, #388]	; (80022b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	f240 80b9 	bls.w	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80b3 	beq.w	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002154:	6093      	str	r3, [r2, #8]
 8002156:	e0a7      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216e:	461a      	mov	r2, r3
 8002170:	2320      	movs	r3, #32
 8002172:	6093      	str	r3, [r2, #8]
 8002174:	e098      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 8093 	bne.w	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d90f      	bls.n	80021aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	e07e      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	0159      	lsls	r1, r3, #5
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d6:	1ad2      	subs	r2, r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d114      	bne.n	800220c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80021f4:	461a      	mov	r2, r3
 80021f6:	2101      	movs	r1, #1
 80021f8:	f002 f832 	bl	8004260 <USB_EP0_OutStart>
 80021fc:	e006      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	441a      	add	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f004 fa8e 	bl	8006734 <HAL_PCD_DataOutStageCallback>
 8002218:	e046      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a26      	ldr	r2, [pc, #152]	; (80022b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d124      	bne.n	800226c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e032      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	2320      	movs	r3, #32
 800225c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f004 fa65 	bl	8006734 <HAL_PCD_DataOutStageCallback>
 800226a:	e01d      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d114      	bne.n	800229c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002294:	461a      	mov	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	f001 ffe2 	bl	8004260 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f004 fa46 	bl	8006734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	4f54300a 	.word	0x4f54300a
 80022b8:	4f54310a 	.word	0x4f54310a

080022bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	333c      	adds	r3, #60	; 0x3c
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d90e      	bls.n	8002310 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002308:	461a      	mov	r2, r3
 800230a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f004 f9fd 	bl	8006710 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <PCD_EP_OutSetupPacket_int+0x88>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d90c      	bls.n	8002338 <PCD_EP_OutSetupPacket_int+0x7c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	799b      	ldrb	r3, [r3, #6]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002330:	461a      	mov	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	f001 ff94 	bl	8004260 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	4f54300a 	.word	0x4f54300a

08002348 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
 8002354:	4613      	mov	r3, r2
 8002356:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002366:	883b      	ldrh	r3, [r7, #0]
 8002368:	0419      	lsls	r1, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	430a      	orrs	r2, r1
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
 8002374:	e028      	b.n	80023c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e00d      	b.n	80023a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	3340      	adds	r3, #64	; 0x40
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	3301      	adds	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3ec      	bcc.n	800238a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023b0:	883b      	ldrh	r3, [r7, #0]
 80023b2:	0418      	lsls	r0, r3, #16
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	4302      	orrs	r2, r0
 80023c0:	3340      	adds	r3, #64	; 0x40
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e267      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d075      	beq.n	800251a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800242e:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00c      	beq.n	8002454 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243a:	4b85      	ldr	r3, [pc, #532]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002442:	2b08      	cmp	r3, #8
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b82      	ldr	r3, [pc, #520]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002452:	d10b      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	4b7e      	ldr	r3, [pc, #504]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05b      	beq.n	8002518 <HAL_RCC_OscConfig+0x108>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d157      	bne.n	8002518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e242      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x74>
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b70      	ldr	r3, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6c      	ldr	r2, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 80024a8:	4b69      	ldr	r3, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a68      	ldr	r2, [pc, #416]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b66      	ldr	r3, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a65      	ldr	r2, [pc, #404]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fa26 	bl	8000918 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fa22 	bl	8000918 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e207      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b5b      	ldr	r3, [pc, #364]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xc0>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fa12 	bl	8000918 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe fa0e 	bl	8000918 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1f3      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b51      	ldr	r3, [pc, #324]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0xe8>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1c7      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4937      	ldr	r1, [pc, #220]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_RCC_OscConfig+0x244>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe f9c7 	bl	8000918 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7fe f9c3 	bl	8000918 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1a8      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b28      	ldr	r3, [pc, #160]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4925      	ldr	r1, [pc, #148]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x244>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe f9a6 	bl	8000918 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7fe f9a2 	bl	8000918 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e187      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d036      	beq.n	8002668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_RCC_OscConfig+0x248>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe f986 	bl	8000918 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe f982 	bl	8000918 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e167      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_OscConfig+0x240>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x200>
 800262e:	e01b      	b.n	8002668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_OscConfig+0x248>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7fe f96f 	bl	8000918 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	e00e      	b.n	800265c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263e:	f7fe f96b 	bl	8000918 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d907      	bls.n	800265c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e150      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
 8002650:	40023800 	.word	0x40023800
 8002654:	42470000 	.word	0x42470000
 8002658:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b88      	ldr	r3, [pc, #544]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ea      	bne.n	800263e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8097 	beq.w	80027a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b81      	ldr	r3, [pc, #516]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b7d      	ldr	r3, [pc, #500]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a7c      	ldr	r2, [pc, #496]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b7a      	ldr	r3, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b77      	ldr	r3, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x474>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b2:	4b74      	ldr	r3, [pc, #464]	; (8002884 <HAL_RCC_OscConfig+0x474>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a73      	ldr	r2, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x474>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7fe f92b 	bl	8000918 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7fe f927 	bl	8000918 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e10c      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x474>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x2ea>
 80026ec:	4b64      	ldr	r3, [pc, #400]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a63      	ldr	r2, [pc, #396]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
 80026f8:	e01c      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x30c>
 8002702:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a5e      	ldr	r2, [pc, #376]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	4b5c      	ldr	r3, [pc, #368]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a5b      	ldr	r2, [pc, #364]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 800271c:	4b58      	ldr	r3, [pc, #352]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a57      	ldr	r2, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	4b55      	ldr	r3, [pc, #340]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4a54      	ldr	r2, [pc, #336]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d015      	beq.n	8002768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe f8ec 	bl	8000918 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe f8e8 	bl	8000918 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0cb      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	4b49      	ldr	r3, [pc, #292]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ee      	beq.n	8002744 <HAL_RCC_OscConfig+0x334>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe f8d6 	bl	8000918 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe f8d2 	bl	8000918 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0b5      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ee      	bne.n	8002770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	4a38      	ldr	r2, [pc, #224]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a1 	beq.w	80028f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d05c      	beq.n	8002874 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d141      	bne.n	8002846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCC_OscConfig+0x478>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe f8a6 	bl	8000918 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe f8a2 	bl	8000918 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e087      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	491b      	ldr	r1, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x478>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe f87b 	bl	8000918 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe f877 	bl	8000918 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e05c      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x416>
 8002844:	e054      	b.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_RCC_OscConfig+0x478>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe f864 	bl	8000918 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe f860 	bl	8000918 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e045      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_OscConfig+0x470>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
 8002872:	e03d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e038      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000
 8002888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x4ec>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d028      	beq.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d121      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11a      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cc      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d90c      	bls.n	800293c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800295e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a52      	ldr	r2, [pc, #328]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d044      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d119      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d003      	beq.n	80029be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e067      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4934      	ldr	r1, [pc, #208]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fd ff92 	bl	8000918 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fd ff8e 	bl	8000918 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20c      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f821 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fef2 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08006d48 	.word	0x08006d48
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad0:	b094      	sub	sp, #80	; 0x50
 8002ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae4:	4b79      	ldr	r3, [pc, #484]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d00d      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x40>
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	f200 80e1 	bhi.w	8002cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x34>
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002afe:	e0db      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b00:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b04:	e0db      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b06:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b0a:	e0d8      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b16:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d063      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	2200      	movs	r2, #0
 8002b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b34:	633b      	str	r3, [r7, #48]	; 0x30
 8002b36:	2300      	movs	r3, #0
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4621      	mov	r1, r4
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	6139      	str	r1, [r7, #16]
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b70:	4659      	mov	r1, fp
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4651      	mov	r1, sl
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4651      	mov	r1, sl
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4651      	mov	r1, sl
 8002b80:	ebb2 0801 	subs.w	r8, r2, r1
 8002b84:	4659      	mov	r1, fp
 8002b86:	eb63 0901 	sbc.w	r9, r3, r1
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	eb18 0303 	adds.w	r3, r8, r3
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	462b      	mov	r3, r5
 8002bac:	eb49 0303 	adc.w	r3, r9, r3
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	024b      	lsls	r3, r1, #9
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bc8:	4621      	mov	r1, r4
 8002bca:	024a      	lsls	r2, r1, #9
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bdc:	f7fd faf4 	bl	80001c8 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	e058      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bea:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c04:	4642      	mov	r2, r8
 8002c06:	464b      	mov	r3, r9
 8002c08:	f04f 0000 	mov.w	r0, #0
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	0159      	lsls	r1, r3, #5
 8002c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c16:	0150      	lsls	r0, r2, #5
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c22:	4649      	mov	r1, r9
 8002c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c40:	eb63 050b 	sbc.w	r5, r3, fp
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	00eb      	lsls	r3, r5, #3
 8002c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c52:	00e2      	lsls	r2, r4, #3
 8002c54:	4614      	mov	r4, r2
 8002c56:	461d      	mov	r5, r3
 8002c58:	4643      	mov	r3, r8
 8002c5a:	18e3      	adds	r3, r4, r3
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	464b      	mov	r3, r9
 8002c60:	eb45 0303 	adc.w	r3, r5, r3
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c72:	4629      	mov	r1, r5
 8002c74:	028b      	lsls	r3, r1, #10
 8002c76:	4621      	mov	r1, r4
 8002c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	028a      	lsls	r2, r1, #10
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	61fa      	str	r2, [r7, #28]
 8002c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c90:	f7fd fa9a 	bl	80001c8 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3750      	adds	r7, #80	; 0x50
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_RCC_GetHCLKFreq+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	f107 001c 	add.w	r0, r7, #28
 8002cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d123      	bne.n	8002d52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f001 fae8 	bl	800431c <USB_CoreReset>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	e01b      	b.n	8002d8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f001 fadc 	bl	800431c <USB_CoreReset>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7c:	e005      	b.n	8002d8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d8a:	7fbb      	ldrb	r3, [r7, #30]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10b      	bne.n	8002da8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f043 0206 	orr.w	r2, r3, #6
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002db4:	b004      	add	sp, #16
 8002db6:	4770      	bx	lr

08002db8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d165      	bne.n	8002e98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <USB_SetTurnaroundTime+0x11c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d906      	bls.n	8002de2 <USB_SetTurnaroundTime+0x2a>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a40      	ldr	r2, [pc, #256]	; (8002ed8 <USB_SetTurnaroundTime+0x120>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d202      	bcs.n	8002de2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ddc:	230f      	movs	r3, #15
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e062      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <USB_SetTurnaroundTime+0x120>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d306      	bcc.n	8002df8 <USB_SetTurnaroundTime+0x40>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <USB_SetTurnaroundTime+0x124>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d202      	bcs.n	8002df8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002df2:	230e      	movs	r3, #14
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e057      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4a38      	ldr	r2, [pc, #224]	; (8002edc <USB_SetTurnaroundTime+0x124>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d306      	bcc.n	8002e0e <USB_SetTurnaroundTime+0x56>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <USB_SetTurnaroundTime+0x128>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d202      	bcs.n	8002e0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e08:	230d      	movs	r3, #13
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e04c      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4a33      	ldr	r2, [pc, #204]	; (8002ee0 <USB_SetTurnaroundTime+0x128>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d306      	bcc.n	8002e24 <USB_SetTurnaroundTime+0x6c>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4a32      	ldr	r2, [pc, #200]	; (8002ee4 <USB_SetTurnaroundTime+0x12c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d802      	bhi.n	8002e24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e1e:	230c      	movs	r3, #12
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e041      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4a2f      	ldr	r2, [pc, #188]	; (8002ee4 <USB_SetTurnaroundTime+0x12c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d906      	bls.n	8002e3a <USB_SetTurnaroundTime+0x82>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <USB_SetTurnaroundTime+0x130>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d802      	bhi.n	8002e3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e34:	230b      	movs	r3, #11
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e036      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <USB_SetTurnaroundTime+0x130>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d906      	bls.n	8002e50 <USB_SetTurnaroundTime+0x98>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <USB_SetTurnaroundTime+0x134>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d802      	bhi.n	8002e50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e02b      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4a26      	ldr	r2, [pc, #152]	; (8002eec <USB_SetTurnaroundTime+0x134>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d906      	bls.n	8002e66 <USB_SetTurnaroundTime+0xae>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <USB_SetTurnaroundTime+0x138>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d202      	bcs.n	8002e66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e60:	2309      	movs	r3, #9
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e020      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <USB_SetTurnaroundTime+0x138>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d306      	bcc.n	8002e7c <USB_SetTurnaroundTime+0xc4>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4a20      	ldr	r2, [pc, #128]	; (8002ef4 <USB_SetTurnaroundTime+0x13c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d802      	bhi.n	8002e7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e76:	2308      	movs	r3, #8
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e015      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <USB_SetTurnaroundTime+0x13c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d906      	bls.n	8002e92 <USB_SetTurnaroundTime+0xda>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <USB_SetTurnaroundTime+0x140>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d202      	bcs.n	8002e92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e00a      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e92:	2306      	movs	r3, #6
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e007      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e9e:	2309      	movs	r3, #9
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e001      	b.n	8002ea8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ea4:	2309      	movs	r3, #9
 8002ea6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	00d8acbf 	.word	0x00d8acbf
 8002ed8:	00e4e1c0 	.word	0x00e4e1c0
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	01067380 	.word	0x01067380
 8002ee4:	011a499f 	.word	0x011a499f
 8002ee8:	01312cff 	.word	0x01312cff
 8002eec:	014ca43f 	.word	0x014ca43f
 8002ef0:	016e3600 	.word	0x016e3600
 8002ef4:	01a6ab1f 	.word	0x01a6ab1f
 8002ef8:	01e84800 	.word	0x01e84800

08002efc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d115      	bne.n	8002f8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f7fd fcde 	bl	8000930 <HAL_Delay>
      ms += 10U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	330a      	adds	r3, #10
 8002f78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f001 f93f 	bl	80041fe <USB_GetMode>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d01e      	beq.n	8002fc4 <USB_SetCurrentMode+0x84>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2bc7      	cmp	r3, #199	; 0xc7
 8002f8a:	d9f0      	bls.n	8002f6e <USB_SetCurrentMode+0x2e>
 8002f8c:	e01a      	b.n	8002fc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d115      	bne.n	8002fc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	f7fd fcc5 	bl	8000930 <HAL_Delay>
      ms += 10U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	330a      	adds	r3, #10
 8002faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f001 f926 	bl	80041fe <USB_GetMode>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <USB_SetCurrentMode+0x84>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2bc7      	cmp	r3, #199	; 0xc7
 8002fbc:	d9f0      	bls.n	8002fa0 <USB_SetCurrentMode+0x60>
 8002fbe:	e001      	b.n	8002fc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e005      	b.n	8002fd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2bc8      	cmp	r3, #200	; 0xc8
 8002fc8:	d101      	bne.n	8002fce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fd8:	b084      	sub	sp, #16
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e009      	b.n	800300c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3340      	adds	r3, #64	; 0x40
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	2200      	movs	r2, #0
 8003004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	3301      	adds	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b0e      	cmp	r3, #14
 8003010:	d9f2      	bls.n	8002ff8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003012:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11c      	bne.n	8003054 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
 8003052:	e00b      	b.n	800306c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003072:	461a      	mov	r2, r3
 8003074:	2300      	movs	r3, #0
 8003076:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003078:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10d      	bne.n	800309c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003088:	2100      	movs	r1, #0
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f968 	bl	8003360 <USB_SetDevSpeed>
 8003090:	e008      	b.n	80030a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003092:	2101      	movs	r1, #1
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f963 	bl	8003360 <USB_SetDevSpeed>
 800309a:	e003      	b.n	80030a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800309c:	2103      	movs	r1, #3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f95e 	bl	8003360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030a4:	2110      	movs	r1, #16
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8fa 	bl	80032a0 <USB_FlushTxFifo>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f924 	bl	8003304 <USB_FlushRxFifo>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030cc:	461a      	mov	r2, r3
 80030ce:	2300      	movs	r3, #0
 80030d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d8:	461a      	mov	r2, r3
 80030da:	2300      	movs	r3, #0
 80030dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e043      	b.n	8003178 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003106:	d118      	bne.n	800313a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311a:	461a      	mov	r2, r3
 800311c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e013      	b.n	800314c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003130:	461a      	mov	r2, r3
 8003132:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e008      	b.n	800314c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	461a      	mov	r2, r3
 800316c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	3301      	adds	r3, #1
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800317c:	461a      	mov	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4293      	cmp	r3, r2
 8003182:	d3b5      	bcc.n	80030f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e043      	b.n	8003212 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800319c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a0:	d118      	bne.n	80031d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b4:	461a      	mov	r2, r3
 80031b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e013      	b.n	80031e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	461a      	mov	r2, r3
 80031cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e008      	b.n	80031e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800320a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3301      	adds	r3, #1
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003216:	461a      	mov	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4293      	cmp	r3, r2
 800321c:	d3b5      	bcc.n	800318a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800323e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003240:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f043 0210 	orr.w	r2, r3, #16
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699a      	ldr	r2, [r3, #24]
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <USB_DevInit+0x2c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003260:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f043 0208 	orr.w	r2, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003274:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003278:	2b01      	cmp	r3, #1
 800327a:	d107      	bne.n	800328c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003298:	b004      	add	sp, #16
 800329a:	4770      	bx	lr
 800329c:	803c3800 	.word	0x803c3800

080032a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3301      	adds	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032ba:	d901      	bls.n	80032c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e01b      	b.n	80032f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	daf2      	bge.n	80032ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	019b      	lsls	r3, r3, #6
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3301      	adds	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032e4:	d901      	bls.n	80032ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e006      	b.n	80032f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d0f0      	beq.n	80032d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3301      	adds	r3, #1
 8003314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800331c:	d901      	bls.n	8003322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e018      	b.n	8003354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	daf2      	bge.n	8003310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2210      	movs	r2, #16
 8003332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3301      	adds	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003340:	d901      	bls.n	8003346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e006      	b.n	8003354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b10      	cmp	r3, #16
 8003350:	d0f0      	beq.n	8003334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0306 	and.w	r3, r3, #6
 80033aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]
 80033b6:	e00a      	b.n	80033ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d002      	beq.n	80033c4 <USB_GetDevSpeed+0x32>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d102      	bne.n	80033ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033c4:	2302      	movs	r3, #2
 80033c6:	75fb      	strb	r3, [r7, #23]
 80033c8:	e001      	b.n	80033ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033ca:	230f      	movs	r3, #15
 80033cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d13a      	bne.n	800346e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	68f9      	ldr	r1, [r7, #12]
 8003412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003416:	4313      	orrs	r3, r2
 8003418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d155      	bne.n	80034dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	791b      	ldrb	r3, [r3, #4]
 800344a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800344c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	059b      	lsls	r3, r3, #22
 8003452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003454:	4313      	orrs	r3, r2
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	0151      	lsls	r1, r2, #5
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	440a      	add	r2, r1
 800345e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	e036      	b.n	80034dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800348c:	4313      	orrs	r3, r2
 800348e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11a      	bne.n	80034dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	791b      	ldrb	r3, [r3, #4]
 80034c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034c2:	430b      	orrs	r3, r1
 80034c4:	4313      	orrs	r3, r2
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d161      	bne.n	80035cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800351a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351e:	d11f      	bne.n	8003560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	0151      	lsls	r1, r2, #5
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	440a      	add	r2, r1
 8003536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800353e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	440a      	add	r2, r1
 8003556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800355e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003580:	4013      	ands	r3, r2
 8003582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	b29b      	uxth	r3, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	68f9      	ldr	r1, [r7, #12]
 80035a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a4:	4013      	ands	r3, r2
 80035a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	0159      	lsls	r1, r3, #5
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	440b      	add	r3, r1
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	4619      	mov	r1, r3
 80035c4:	4b35      	ldr	r3, [pc, #212]	; (800369c <USB_DeactivateEndpoint+0x1b0>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]
 80035ca:	e060      	b.n	800368e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e2:	d11f      	bne.n	8003624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	440a      	add	r2, r1
 800361a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	43db      	mvns	r3, r3
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003644:	4013      	ands	r3, r2
 8003646:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	43db      	mvns	r3, r3
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003668:	4013      	ands	r3, r2
 800366a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	0159      	lsls	r1, r3, #5
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	440b      	add	r3, r1
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	4619      	mov	r1, r3
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <USB_DeactivateEndpoint+0x1b4>)
 800368a:	4013      	ands	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	ec337800 	.word	0xec337800
 80036a0:	eff37800 	.word	0xeff37800

080036a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	f040 8180 	bne.w	80039c6 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d132      	bne.n	8003734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	0151      	lsls	r1, r2, #5
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	440a      	add	r2, r1
 80036e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	440a      	add	r2, r1
 8003708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800370c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	0151      	lsls	r1, r2, #5
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	440a      	add	r2, r1
 8003728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800372c:	0cdb      	lsrs	r3, r3, #19
 800372e:	04db      	lsls	r3, r3, #19
 8003730:	6113      	str	r3, [r2, #16]
 8003732:	e098      	b.n	8003866 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	0151      	lsls	r1, r2, #5
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	440a      	add	r2, r1
 800374a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800374e:	0cdb      	lsrs	r3, r3, #19
 8003750:	04db      	lsls	r3, r3, #19
 8003752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	0151      	lsls	r1, r2, #5
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	440a      	add	r2, r1
 800376a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003776:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11a      	bne.n	80037b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d903      	bls.n	8003792 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037b0:	6113      	str	r3, [r2, #16]
 80037b2:	e045      	b.n	8003840 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4413      	add	r3, r2
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	8afb      	ldrh	r3, [r7, #22]
 80037da:	04db      	lsls	r3, r3, #19
 80037dc:	4619      	mov	r1, r3
 80037de:	4ba4      	ldr	r3, [pc, #656]	; (8003a70 <USB_EPStartXfer+0x3cc>)
 80037e0:	400b      	ands	r3, r1
 80037e2:	69b9      	ldr	r1, [r7, #24]
 80037e4:	0148      	lsls	r0, r1, #5
 80037e6:	69f9      	ldr	r1, [r7, #28]
 80037e8:	4401      	add	r1, r0
 80037ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037ee:	4313      	orrs	r3, r2
 80037f0:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	791b      	ldrb	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d122      	bne.n	8003840 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	0151      	lsls	r1, r2, #5
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	440a      	add	r2, r1
 8003810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003814:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003818:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	8afb      	ldrh	r3, [r7, #22]
 800382a:	075b      	lsls	r3, r3, #29
 800382c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003830:	69b9      	ldr	r1, [r7, #24]
 8003832:	0148      	lsls	r0, r1, #5
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	4401      	add	r1, r0
 8003838:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800383c:	4313      	orrs	r3, r2
 800383e:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	0148      	lsls	r0, r1, #5
 800385a:	69f9      	ldr	r1, [r7, #28]
 800385c:	4401      	add	r1, r0
 800385e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d14b      	bne.n	8003904 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d128      	bne.n	80038e2 <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d110      	bne.n	80038c2 <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	0151      	lsls	r1, r2, #5
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	440a      	add	r2, r1
 80038b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	e00f      	b.n	80038e2 <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e165      	b.n	8003bd0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003922:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	791b      	ldrb	r3, [r3, #4]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d015      	beq.n	8003958 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 814d 	beq.w	8003bd0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003952:	4313      	orrs	r3, r2
 8003954:	634b      	str	r3, [r1, #52]	; 0x34
 8003956:	e13b      	b.n	8003bd0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d110      	bne.n	800398a <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e00f      	b.n	80039aa <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	68d9      	ldr	r1, [r3, #12]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	b298      	uxth	r0, r3
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4603      	mov	r3, r0
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f9b8 	bl	8003d34 <USB_WritePacket>
 80039c4:	e104      	b.n	8003bd0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e0:	0cdb      	lsrs	r3, r3, #19
 80039e2:	04db      	lsls	r3, r3, #19
 80039e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	0151      	lsls	r1, r2, #5
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	440a      	add	r2, r1
 80039fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a08:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d131      	bne.n	8003a74 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	0148      	lsls	r0, r1, #5
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	4401      	add	r1, r0
 8003a46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	0151      	lsls	r1, r2, #5
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	440a      	add	r2, r1
 8003a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a6c:	6113      	str	r3, [r2, #16]
 8003a6e:	e061      	b.n	8003b34 <USB_EPStartXfer+0x490>
 8003a70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d123      	bne.n	8003ac4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	0148      	lsls	r0, r1, #5
 8003a96:	69f9      	ldr	r1, [r7, #28]
 8003a98:	4401      	add	r1, r0
 8003a9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003abc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ac0:	6113      	str	r3, [r2, #16]
 8003ac2:	e037      	b.n	8003b34 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4413      	add	r3, r2
 8003ace:	1e5a      	subs	r2, r3, #1
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	8afa      	ldrh	r2, [r7, #22]
 8003ae0:	fb03 f202 	mul.w	r2, r3, r2
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	8afb      	ldrh	r3, [r7, #22]
 8003af8:	04d9      	lsls	r1, r3, #19
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <USB_EPStartXfer+0x538>)
 8003afc:	400b      	ands	r3, r1
 8003afe:	69b9      	ldr	r1, [r7, #24]
 8003b00:	0148      	lsls	r0, r1, #5
 8003b02:	69f9      	ldr	r1, [r7, #28]
 8003b04:	4401      	add	r1, r0
 8003b06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	0148      	lsls	r0, r1, #5
 8003b28:	69f9      	ldr	r1, [r7, #28]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10d      	bne.n	8003b56 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	68d9      	ldr	r1, [r3, #12]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	460a      	mov	r2, r1
 8003b54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	791b      	ldrb	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d128      	bne.n	8003bb0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d110      	bne.n	8003b90 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00f      	b.n	8003bb0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	1ff80000 	.word	0x1ff80000

08003be0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d14a      	bne.n	8003c94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c16:	f040 8086 	bne.w	8003d26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d902      	bls.n	8003c78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
          break;
 8003c76:	e056      	b.n	8003d26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c90:	d0e7      	beq.n	8003c62 <USB_EPStopXfer+0x82>
 8003c92:	e048      	b.n	8003d26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cac:	d13b      	bne.n	8003d26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ccc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d902      	bls.n	8003d0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
          break;
 8003d0a:	e00c      	b.n	8003d26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d24:	d0e7      	beq.n	8003cf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	460b      	mov	r3, r1
 8003d44:	71fb      	strb	r3, [r7, #7]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d123      	bne.n	8003da2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d5a:	88bb      	ldrh	r3, [r7, #4]
 8003d5c:	3303      	adds	r3, #3
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e018      	b.n	8003d9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	031a      	lsls	r2, r3, #12
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d74:	461a      	mov	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d3e2      	bcc.n	8003d68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3724      	adds	r7, #36	; 0x24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b08b      	sub	sp, #44	; 0x2c
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	623b      	str	r3, [r7, #32]
 8003dda:	e014      	b.n	8003e06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	3301      	adds	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	3301      	adds	r3, #1
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	3301      	adds	r3, #1
 8003e04:	623b      	str	r3, [r7, #32]
 8003e06:	6a3a      	ldr	r2, [r7, #32]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3e6      	bcc.n	8003ddc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e0e:	8bfb      	ldrh	r3, [r7, #30]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01e      	beq.n	8003e52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	701a      	strb	r2, [r3, #0]
      i++;
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	3301      	adds	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e46:	8bfb      	ldrh	r3, [r7, #30]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e4c:	8bfb      	ldrh	r3, [r7, #30]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ea      	bne.n	8003e28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	372c      	adds	r7, #44	; 0x2c
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d12c      	bne.n	8003ed6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	db12      	blt.n	8003eb4 <USB_EPSetStall+0x54>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00f      	beq.n	8003eb4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eb2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	0151      	lsls	r1, r2, #5
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	440a      	add	r2, r1
 8003eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e02b      	b.n	8003f2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db12      	blt.n	8003f0e <USB_EPSetStall+0xae>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00f      	beq.n	8003f0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d128      	bne.n	8003faa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	791b      	ldrb	r3, [r3, #4]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d003      	beq.n	8003f88 <USB_EPClearStall+0x4c>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d138      	bne.n	8003ffa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e027      	b.n	8003ffa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	0151      	lsls	r1, r2, #5
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	791b      	ldrb	r3, [r3, #4]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d003      	beq.n	8003fda <USB_EPClearStall+0x9e>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	791b      	ldrb	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d10f      	bne.n	8003ffa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800402a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004082:	f023 0302 	bic.w	r3, r3, #2
 8004086:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040b0:	f023 0303 	bic.w	r3, r3, #3
 80040b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80040f0:	68fb      	ldr	r3, [r7, #12]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	0c1b      	lsrs	r3, r3, #16
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	b29b      	uxth	r3, r3
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004194:	68bb      	ldr	r3, [r7, #8]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b087      	sub	sp, #28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	fa22 f303 	lsr.w	r3, r2, r3
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041f0:	68bb      	ldr	r3, [r7, #8]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0301 	and.w	r3, r3, #1
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004234:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004238:	f023 0307 	bic.w	r3, r3, #7
 800423c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	460b      	mov	r3, r1
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	333c      	adds	r3, #60	; 0x3c
 8004276:	3304      	adds	r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <USB_EP0_OutStart+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d90a      	bls.n	800429a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004294:	d101      	bne.n	800429a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e037      	b.n	800430a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a0:	461a      	mov	r2, r3
 80042a2:	2300      	movs	r3, #0
 80042a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c8:	f043 0318 	orr.w	r3, r3, #24
 80042cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80042e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80042e2:	7afb      	ldrb	r3, [r7, #11]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d10f      	bne.n	8004308 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004302:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	4f54300a 	.word	0x4f54300a

0800431c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004334:	d901      	bls.n	800433a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e01b      	b.n	8004372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	daf2      	bge.n	8004328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800435e:	d901      	bls.n	8004364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e006      	b.n	8004372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d0f0      	beq.n	8004352 <USB_CoreReset+0x36>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800438c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004390:	f002 fc3a 	bl	8006c08 <USBD_static_malloc>
 8004394:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	32b0      	adds	r2, #176	; 0xb0
 80043a6:	2100      	movs	r1, #0
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80043ac:	2302      	movs	r3, #2
 80043ae:	e0d4      	b.n	800455a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80043b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80043b4:	2100      	movs	r1, #0
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f002 fc6a 	bl	8006c90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	32b0      	adds	r2, #176	; 0xb0
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	32b0      	adds	r2, #176	; 0xb0
 80043d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7c1b      	ldrb	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d138      	bne.n	800445a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80043e8:	4b5e      	ldr	r3, [pc, #376]	; (8004564 <USBD_CDC_Init+0x1e4>)
 80043ea:	7819      	ldrb	r1, [r3, #0]
 80043ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043f0:	2202      	movs	r2, #2
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f002 fae5 	bl	80069c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80043f8:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <USBD_CDC_Init+0x1e4>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3324      	adds	r3, #36	; 0x24
 800440e:	2201      	movs	r2, #1
 8004410:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004412:	4b55      	ldr	r3, [pc, #340]	; (8004568 <USBD_CDC_Init+0x1e8>)
 8004414:	7819      	ldrb	r1, [r3, #0]
 8004416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800441a:	2202      	movs	r2, #2
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f002 fad0 	bl	80069c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <USBD_CDC_Init+0x1e8>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800443a:	2201      	movs	r2, #1
 800443c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800443e:	4b4b      	ldr	r3, [pc, #300]	; (800456c <USBD_CDC_Init+0x1ec>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3326      	adds	r3, #38	; 0x26
 8004454:	2210      	movs	r2, #16
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	e035      	b.n	80044c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800445a:	4b42      	ldr	r3, [pc, #264]	; (8004564 <USBD_CDC_Init+0x1e4>)
 800445c:	7819      	ldrb	r1, [r3, #0]
 800445e:	2340      	movs	r3, #64	; 0x40
 8004460:	2202      	movs	r2, #2
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f002 faad 	bl	80069c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004468:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <USBD_CDC_Init+0x1e4>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3324      	adds	r3, #36	; 0x24
 800447e:	2201      	movs	r2, #1
 8004480:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <USBD_CDC_Init+0x1e8>)
 8004484:	7819      	ldrb	r1, [r3, #0]
 8004486:	2340      	movs	r3, #64	; 0x40
 8004488:	2202      	movs	r2, #2
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f002 fa99 	bl	80069c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004490:	4b35      	ldr	r3, [pc, #212]	; (8004568 <USBD_CDC_Init+0x1e8>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80044a8:	2201      	movs	r2, #1
 80044aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80044ac:	4b2f      	ldr	r3, [pc, #188]	; (800456c <USBD_CDC_Init+0x1ec>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3326      	adds	r3, #38	; 0x26
 80044c2:	2210      	movs	r2, #16
 80044c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <USBD_CDC_Init+0x1ec>)
 80044c8:	7819      	ldrb	r1, [r3, #0]
 80044ca:	2308      	movs	r3, #8
 80044cc:	2203      	movs	r2, #3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f002 fa77 	bl	80069c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <USBD_CDC_Init+0x1ec>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3324      	adds	r3, #36	; 0x24
 80044ea:	2201      	movs	r2, #1
 80044ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	33b0      	adds	r3, #176	; 0xb0
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004524:	2302      	movs	r3, #2
 8004526:	e018      	b.n	800455a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7c1b      	ldrb	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004530:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <USBD_CDC_Init+0x1e8>)
 8004532:	7819      	ldrb	r1, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800453a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f002 fb2e 	bl	8006ba0 <USBD_LL_PrepareReceive>
 8004544:	e008      	b.n	8004558 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <USBD_CDC_Init+0x1e8>)
 8004548:	7819      	ldrb	r1, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004550:	2340      	movs	r3, #64	; 0x40
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f002 fb24 	bl	8006ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000093 	.word	0x20000093
 8004568:	20000094 	.word	0x20000094
 800456c:	20000095 	.word	0x20000095

08004570 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800457c:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <USBD_CDC_DeInit+0xf8>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f002 fa43 	bl	8006a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004588:	4b37      	ldr	r3, [pc, #220]	; (8004668 <USBD_CDC_DeInit+0xf8>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3324      	adds	r3, #36	; 0x24
 800459e:	2200      	movs	r2, #0
 80045a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80045a2:	4b32      	ldr	r3, [pc, #200]	; (800466c <USBD_CDC_DeInit+0xfc>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f002 fa30 	bl	8006a0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80045ae:	4b2f      	ldr	r3, [pc, #188]	; (800466c <USBD_CDC_DeInit+0xfc>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f003 020f 	and.w	r2, r3, #15
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045c6:	2200      	movs	r2, #0
 80045c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80045ca:	4b29      	ldr	r3, [pc, #164]	; (8004670 <USBD_CDC_DeInit+0x100>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f002 fa1c 	bl	8006a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80045d6:	4b26      	ldr	r3, [pc, #152]	; (8004670 <USBD_CDC_DeInit+0x100>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3324      	adds	r3, #36	; 0x24
 80045ec:	2200      	movs	r2, #0
 80045ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80045f0:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <USBD_CDC_DeInit+0x100>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f003 020f 	and.w	r2, r3, #15
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3326      	adds	r3, #38	; 0x26
 8004606:	2200      	movs	r2, #0
 8004608:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	32b0      	adds	r2, #176	; 0xb0
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01f      	beq.n	800465c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	33b0      	adds	r3, #176	; 0xb0
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	32b0      	adds	r2, #176	; 0xb0
 800463a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463e:	4618      	mov	r0, r3
 8004640:	f002 faf0 	bl	8006c24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	32b0      	adds	r2, #176	; 0xb0
 800464e:	2100      	movs	r1, #0
 8004650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000093 	.word	0x20000093
 800466c:	20000094 	.word	0x20000094
 8004670:	20000095 	.word	0x20000095

08004674 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	32b0      	adds	r2, #176	; 0xb0
 8004688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0bf      	b.n	8004824 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d050      	beq.n	8004752 <USBD_CDC_Setup+0xde>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	f040 80af 	bne.w	8004814 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	88db      	ldrh	r3, [r3, #6]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03a      	beq.n	8004734 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da1b      	bge.n	8004700 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	33b0      	adds	r3, #176	; 0xb0
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80046de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	88d2      	ldrh	r2, [r2, #6]
 80046e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	88db      	ldrh	r3, [r3, #6]
 80046ea:	2b07      	cmp	r3, #7
 80046ec:	bf28      	it	cs
 80046ee:	2307      	movcs	r3, #7
 80046f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	89fa      	ldrh	r2, [r7, #14]
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fd55 	bl	80061a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80046fe:	e090      	b.n	8004822 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	785a      	ldrb	r2, [r3, #1]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	88db      	ldrh	r3, [r3, #6]
 800470e:	2b3f      	cmp	r3, #63	; 0x3f
 8004710:	d803      	bhi.n	800471a <USBD_CDC_Setup+0xa6>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	88db      	ldrh	r3, [r3, #6]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	e000      	b.n	800471c <USBD_CDC_Setup+0xa8>
 800471a:	2240      	movs	r2, #64	; 0x40
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004722:	6939      	ldr	r1, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800472a:	461a      	mov	r2, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f001 fd67 	bl	8006200 <USBD_CtlPrepareRx>
      break;
 8004732:	e076      	b.n	8004822 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	33b0      	adds	r3, #176	; 0xb0
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	7850      	ldrb	r0, [r2, #1]
 800474a:	2200      	movs	r2, #0
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	4798      	blx	r3
      break;
 8004750:	e067      	b.n	8004822 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b0b      	cmp	r3, #11
 8004758:	d851      	bhi.n	80047fe <USBD_CDC_Setup+0x18a>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <USBD_CDC_Setup+0xec>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004791 	.word	0x08004791
 8004764:	0800480d 	.word	0x0800480d
 8004768:	080047ff 	.word	0x080047ff
 800476c:	080047ff 	.word	0x080047ff
 8004770:	080047ff 	.word	0x080047ff
 8004774:	080047ff 	.word	0x080047ff
 8004778:	080047ff 	.word	0x080047ff
 800477c:	080047ff 	.word	0x080047ff
 8004780:	080047ff 	.word	0x080047ff
 8004784:	080047ff 	.word	0x080047ff
 8004788:	080047bb 	.word	0x080047bb
 800478c:	080047e5 	.word	0x080047e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b03      	cmp	r3, #3
 800479a:	d107      	bne.n	80047ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800479c:	f107 030a 	add.w	r3, r7, #10
 80047a0:	2202      	movs	r2, #2
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f001 fcff 	bl	80061a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047aa:	e032      	b.n	8004812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 fc7d 	bl	80060ae <USBD_CtlError>
            ret = USBD_FAIL;
 80047b4:	2303      	movs	r3, #3
 80047b6:	75fb      	strb	r3, [r7, #23]
          break;
 80047b8:	e02b      	b.n	8004812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d107      	bne.n	80047d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047c6:	f107 030d 	add.w	r3, r7, #13
 80047ca:	2201      	movs	r2, #1
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f001 fcea 	bl	80061a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047d4:	e01d      	b.n	8004812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 fc68 	bl	80060ae <USBD_CtlError>
            ret = USBD_FAIL;
 80047de:	2303      	movs	r3, #3
 80047e0:	75fb      	strb	r3, [r7, #23]
          break;
 80047e2:	e016      	b.n	8004812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d00f      	beq.n	8004810 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f001 fc5b 	bl	80060ae <USBD_CtlError>
            ret = USBD_FAIL;
 80047f8:	2303      	movs	r3, #3
 80047fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80047fc:	e008      	b.n	8004810 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f001 fc54 	bl	80060ae <USBD_CtlError>
          ret = USBD_FAIL;
 8004806:	2303      	movs	r3, #3
 8004808:	75fb      	strb	r3, [r7, #23]
          break;
 800480a:	e002      	b.n	8004812 <USBD_CDC_Setup+0x19e>
          break;
 800480c:	bf00      	nop
 800480e:	e008      	b.n	8004822 <USBD_CDC_Setup+0x1ae>
          break;
 8004810:	bf00      	nop
      }
      break;
 8004812:	e006      	b.n	8004822 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004814:	6839      	ldr	r1, [r7, #0]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f001 fc49 	bl	80060ae <USBD_CtlError>
      ret = USBD_FAIL;
 800481c:	2303      	movs	r3, #3
 800481e:	75fb      	strb	r3, [r7, #23]
      break;
 8004820:	bf00      	nop
  }

  return (uint8_t)ret;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800483e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	32b0      	adds	r2, #176	; 0xb0
 800484a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004852:	2303      	movs	r3, #3
 8004854:	e065      	b.n	8004922 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	32b0      	adds	r2, #176	; 0xb0
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3318      	adds	r3, #24
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02f      	beq.n	80048e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	3318      	adds	r3, #24
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	f003 010f 	and.w	r1, r3, #15
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	460b      	mov	r3, r1
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4403      	add	r3, r0
 80048a8:	331c      	adds	r3, #28
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d112      	bne.n	80048e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3318      	adds	r3, #24
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80048d2:	78f9      	ldrb	r1, [r7, #3]
 80048d4:	2300      	movs	r3, #0
 80048d6:	2200      	movs	r2, #0
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f002 f940 	bl	8006b5e <USBD_LL_Transmit>
 80048de:	e01f      	b.n	8004920 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	33b0      	adds	r3, #176	; 0xb0
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d010      	beq.n	8004920 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	33b0      	adds	r3, #176	; 0xb0
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	32b0      	adds	r2, #176	; 0xb0
 8004940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004944:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	32b0      	adds	r2, #176	; 0xb0
 8004950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004958:	2303      	movs	r3, #3
 800495a:	e01a      	b.n	8004992 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f002 f93e 	bl	8006be2 <USBD_LL_GetRxDataSize>
 8004966:	4602      	mov	r2, r0
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	33b0      	adds	r3, #176	; 0xb0
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800498c:	4611      	mov	r1, r2
 800498e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	32b0      	adds	r2, #176	; 0xb0
 80049ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e025      	b.n	8004a08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	33b0      	adds	r3, #176	; 0xb0
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01a      	beq.n	8004a06 <USBD_CDC_EP0_RxReady+0x6c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80049d6:	2bff      	cmp	r3, #255	; 0xff
 80049d8:	d015      	beq.n	8004a06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	33b0      	adds	r3, #176	; 0xb0
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80049f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80049fa:	b292      	uxth	r2, r2
 80049fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	22ff      	movs	r2, #255	; 0xff
 8004a02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a18:	2182      	movs	r1, #130	; 0x82
 8004a1a:	4818      	ldr	r0, [pc, #96]	; (8004a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a1c:	f000 fd0f 	bl	800543e <USBD_GetEpDesc>
 8004a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a22:	2101      	movs	r1, #1
 8004a24:	4815      	ldr	r0, [pc, #84]	; (8004a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a26:	f000 fd0a 	bl	800543e <USBD_GetEpDesc>
 8004a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a2c:	2181      	movs	r1, #129	; 0x81
 8004a2e:	4813      	ldr	r0, [pc, #76]	; (8004a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a30:	f000 fd05 	bl	800543e <USBD_GetEpDesc>
 8004a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2210      	movs	r2, #16
 8004a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a50:	711a      	strb	r2, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a64:	711a      	strb	r2, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2243      	movs	r2, #67	; 0x43
 8004a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000050 	.word	0x20000050

08004a80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a88:	2182      	movs	r1, #130	; 0x82
 8004a8a:	4818      	ldr	r0, [pc, #96]	; (8004aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a8c:	f000 fcd7 	bl	800543e <USBD_GetEpDesc>
 8004a90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a92:	2101      	movs	r1, #1
 8004a94:	4815      	ldr	r0, [pc, #84]	; (8004aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a96:	f000 fcd2 	bl	800543e <USBD_GetEpDesc>
 8004a9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a9c:	2181      	movs	r1, #129	; 0x81
 8004a9e:	4813      	ldr	r0, [pc, #76]	; (8004aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004aa0:	f000 fccd 	bl	800543e <USBD_GetEpDesc>
 8004aa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d006      	beq.n	8004ac6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2200      	movs	r2, #0
 8004abc:	711a      	strb	r2, [r3, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f042 0202 	orr.w	r2, r2, #2
 8004ac4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d006      	beq.n	8004ada <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	711a      	strb	r2, [r3, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f042 0202 	orr.w	r2, r2, #2
 8004ad8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2243      	movs	r2, #67	; 0x43
 8004ade:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004ae0:	4b02      	ldr	r3, [pc, #8]	; (8004aec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000050 	.word	0x20000050

08004af0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004af8:	2182      	movs	r1, #130	; 0x82
 8004afa:	4818      	ldr	r0, [pc, #96]	; (8004b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004afc:	f000 fc9f 	bl	800543e <USBD_GetEpDesc>
 8004b00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b02:	2101      	movs	r1, #1
 8004b04:	4815      	ldr	r0, [pc, #84]	; (8004b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b06:	f000 fc9a 	bl	800543e <USBD_GetEpDesc>
 8004b0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b0c:	2181      	movs	r1, #129	; 0x81
 8004b0e:	4813      	ldr	r0, [pc, #76]	; (8004b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b10:	f000 fc95 	bl	800543e <USBD_GetEpDesc>
 8004b14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2210      	movs	r2, #16
 8004b20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b30:	711a      	strb	r2, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b44:	711a      	strb	r2, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2243      	movs	r2, #67	; 0x43
 8004b4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b50:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000050 	.word	0x20000050

08004b60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	220a      	movs	r2, #10
 8004b6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004b6e:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	2000000c 	.word	0x2000000c

08004b80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e009      	b.n	8004ba8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	33b0      	adds	r3, #176	; 0xb0
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	32b0      	adds	r2, #176	; 0xb0
 8004bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e008      	b.n	8004bec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	32b0      	adds	r2, #176	; 0xb0
 8004c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e004      	b.n	8004c26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	32b0      	adds	r2, #176	; 0xb0
 8004c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	32b0      	adds	r2, #176	; 0xb0
 8004c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e018      	b.n	8004c94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	7c1b      	ldrb	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <USBD_CDC_ReceivePacket+0x68>)
 8004c6c:	7819      	ldrb	r1, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 ff91 	bl	8006ba0 <USBD_LL_PrepareReceive>
 8004c7e:	e008      	b.n	8004c92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <USBD_CDC_ReceivePacket+0x68>)
 8004c82:	7819      	ldrb	r1, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c8a:	2340      	movs	r3, #64	; 0x40
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 ff87 	bl	8006ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000094 	.word	0x20000094

08004ca0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e01f      	b.n	8004cf8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	79fa      	ldrb	r2, [r7, #7]
 8004cea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f001 fe01 	bl	80068f4 <USBD_LL_Init>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e025      	b.n	8004d64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	32ae      	adds	r2, #174	; 0xae
 8004d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00f      	beq.n	8004d54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	32ae      	adds	r2, #174	; 0xae
 8004d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	f107 020e 	add.w	r2, r7, #14
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4798      	blx	r3
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fe09 	bl	800698c <USBD_LL_Start>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	78fa      	ldrb	r2, [r7, #3]
 8004dec:	4611      	mov	r1, r2
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 f90e 	bl	800603a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d01a      	beq.n	8004e78 <USBD_LL_SetupStage+0x72>
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d822      	bhi.n	8004e8c <USBD_LL_SetupStage+0x86>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <USBD_LL_SetupStage+0x4a>
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d00a      	beq.n	8004e64 <USBD_LL_SetupStage+0x5e>
 8004e4e:	e01d      	b.n	8004e8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb65 	bl	8005528 <USBD_StdDevReq>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
      break;
 8004e62:	e020      	b.n	8004ea6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fbcd 	bl	800560c <USBD_StdItfReq>
 8004e72:	4603      	mov	r3, r0
 8004e74:	73fb      	strb	r3, [r7, #15]
      break;
 8004e76:	e016      	b.n	8004ea6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fc2f 	bl	80056e4 <USBD_StdEPReq>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8a:	e00c      	b.n	8004ea6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fdd6 	bl	8006a4c <USBD_LL_StallEP>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea4:	bf00      	nop
  }

  return ret;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ec2:	7afb      	ldrb	r3, [r7, #11]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d16e      	bne.n	8004fa6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ece:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	f040 8098 	bne.w	800500c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d913      	bls.n	8004f10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	4293      	cmp	r3, r2
 8004f00:	bf28      	it	cs
 8004f02:	4613      	movcs	r3, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f001 f996 	bl	800623a <USBD_CtlContinueRx>
 8004f0e:	e07d      	b.n	800500c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d014      	beq.n	8004f48 <USBD_LL_DataOutStage+0x98>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d81d      	bhi.n	8004f5e <USBD_LL_DataOutStage+0xae>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <USBD_LL_DataOutStage+0x7c>
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d003      	beq.n	8004f32 <USBD_LL_DataOutStage+0x82>
 8004f2a:	e018      	b.n	8004f5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75bb      	strb	r3, [r7, #22]
            break;
 8004f30:	e018      	b.n	8004f64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fa64 	bl	800540a <USBD_CoreFindIF>
 8004f42:	4603      	mov	r3, r0
 8004f44:	75bb      	strb	r3, [r7, #22]
            break;
 8004f46:	e00d      	b.n	8004f64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	4619      	mov	r1, r3
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fa66 	bl	8005424 <USBD_CoreFindEP>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	75bb      	strb	r3, [r7, #22]
            break;
 8004f5c:	e002      	b.n	8004f64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75bb      	strb	r3, [r7, #22]
            break;
 8004f62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f64:	7dbb      	ldrb	r3, [r7, #22]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d119      	bne.n	8004f9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d113      	bne.n	8004f9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004f76:	7dba      	ldrb	r2, [r7, #22]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	32ae      	adds	r2, #174	; 0xae
 8004f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004f86:	7dba      	ldrb	r2, [r7, #22]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004f8e:	7dba      	ldrb	r2, [r7, #22]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	32ae      	adds	r2, #174	; 0xae
 8004f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f001 f95c 	bl	800625c <USBD_CtlSendStatus>
 8004fa4:	e032      	b.n	800500c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
 8004fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	4619      	mov	r1, r3
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fa37 	bl	8005424 <USBD_CoreFindEP>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004fba:	7dbb      	ldrb	r3, [r7, #22]
 8004fbc:	2bff      	cmp	r3, #255	; 0xff
 8004fbe:	d025      	beq.n	800500c <USBD_LL_DataOutStage+0x15c>
 8004fc0:	7dbb      	ldrb	r3, [r7, #22]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d122      	bne.n	800500c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d117      	bne.n	8005002 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004fd2:	7dba      	ldrb	r2, [r7, #22]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	32ae      	adds	r2, #174	; 0xae
 8004fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00f      	beq.n	8005002 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004fe2:	7dba      	ldrb	r2, [r7, #22]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004fea:	7dba      	ldrb	r2, [r7, #22]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	32ae      	adds	r2, #174	; 0xae
 8004ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	7afa      	ldrb	r2, [r7, #11]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	4798      	blx	r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	e000      	b.n	800500e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	460b      	mov	r3, r1
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005024:	7afb      	ldrb	r3, [r7, #11]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d16f      	bne.n	800510a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3314      	adds	r3, #20
 800502e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005036:	2b02      	cmp	r3, #2
 8005038:	d15a      	bne.n	80050f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	429a      	cmp	r2, r3
 8005044:	d914      	bls.n	8005070 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	461a      	mov	r2, r3
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f001 f8be 	bl	80061de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005062:	2300      	movs	r3, #0
 8005064:	2200      	movs	r2, #0
 8005066:	2100      	movs	r1, #0
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f001 fd99 	bl	8006ba0 <USBD_LL_PrepareReceive>
 800506e:	e03f      	b.n	80050f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	d11c      	bne.n	80050b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005084:	429a      	cmp	r2, r3
 8005086:	d316      	bcc.n	80050b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005092:	429a      	cmp	r2, r3
 8005094:	d20f      	bcs.n	80050b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f001 f89f 	bl	80061de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050a8:	2300      	movs	r3, #0
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f001 fd76 	bl	8006ba0 <USBD_LL_PrepareReceive>
 80050b4:	e01c      	b.n	80050f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d10f      	bne.n	80050e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f001 fcb1 	bl	8006a4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f001 f8c9 	bl	8006282 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d03a      	beq.n	8005170 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff fe42 	bl	8004d84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005108:	e032      	b.n	8005170 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005110:	b2db      	uxtb	r3, r3
 8005112:	4619      	mov	r1, r3
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f985 	bl	8005424 <USBD_CoreFindEP>
 800511a:	4603      	mov	r3, r0
 800511c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2bff      	cmp	r3, #255	; 0xff
 8005122:	d025      	beq.n	8005170 <USBD_LL_DataInStage+0x15a>
 8005124:	7dfb      	ldrb	r3, [r7, #23]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d122      	bne.n	8005170 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b03      	cmp	r3, #3
 8005134:	d11c      	bne.n	8005170 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005136:	7dfa      	ldrb	r2, [r7, #23]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	32ae      	adds	r2, #174	; 0xae
 800513c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d014      	beq.n	8005170 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005146:	7dfa      	ldrb	r2, [r7, #23]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800514e:	7dfa      	ldrb	r2, [r7, #23]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	32ae      	adds	r2, #174	; 0xae
 8005154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	7afa      	ldrb	r2, [r7, #11]
 800515c:	4611      	mov	r1, r2
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	4798      	blx	r3
 8005162:	4603      	mov	r3, r0
 8005164:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005166:	7dbb      	ldrb	r3, [r7, #22]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800516c:	7dbb      	ldrb	r3, [r7, #22]
 800516e:	e000      	b.n	8005172 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d014      	beq.n	80051e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6852      	ldr	r2, [r2, #4]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	4611      	mov	r1, r2
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80051dc:	2303      	movs	r3, #3
 80051de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	2200      	movs	r2, #0
 80051e4:	2100      	movs	r1, #0
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f001 fbeb 	bl	80069c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2240      	movs	r2, #64	; 0x40
 80051f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051fc:	2340      	movs	r3, #64	; 0x40
 80051fe:	2200      	movs	r2, #0
 8005200:	2180      	movs	r1, #128	; 0x80
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f001 fbdd 	bl	80069c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2240      	movs	r2, #64	; 0x40
 8005212:	621a      	str	r2, [r3, #32]

  return ret;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b04      	cmp	r3, #4
 8005250:	d006      	beq.n	8005260 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005258:	b2da      	uxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2204      	movs	r2, #4
 8005264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b04      	cmp	r3, #4
 8005288:	d106      	bne.n	8005298 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005290:	b2da      	uxtb	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d110      	bne.n	80052dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	32ae      	adds	r2, #174	; 0xae
 80052fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005304:	2303      	movs	r3, #3
 8005306:	e01c      	b.n	8005342 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b03      	cmp	r3, #3
 8005312:	d115      	bne.n	8005340 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	32ae      	adds	r2, #174	; 0xae
 800531e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	32ae      	adds	r2, #174	; 0xae
 8005332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	4611      	mov	r1, r2
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	32ae      	adds	r2, #174	; 0xae
 8005360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005368:	2303      	movs	r3, #3
 800536a:	e01c      	b.n	80053a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d115      	bne.n	80053a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	32ae      	adds	r2, #174	; 0xae
 8005382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32ae      	adds	r2, #174	; 0xae
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	4611      	mov	r1, r2
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00e      	beq.n	8005400 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6852      	ldr	r2, [r2, #4]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	4611      	mov	r1, r2
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80053fc:	2303      	movs	r3, #3
 80053fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005416:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005430:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	885b      	ldrh	r3, [r3, #2]
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	429a      	cmp	r2, r3
 8005464:	d920      	bls.n	80054a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800546e:	e013      	b.n	8005498 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005470:	f107 030a 	add.w	r3, r7, #10
 8005474:	4619      	mov	r1, r3
 8005476:	6978      	ldr	r0, [r7, #20]
 8005478:	f000 f81b 	bl	80054b2 <USBD_GetNextDesc>
 800547c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b05      	cmp	r3, #5
 8005484:	d108      	bne.n	8005498 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	789b      	ldrb	r3, [r3, #2]
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	429a      	cmp	r2, r3
 8005492:	d008      	beq.n	80054a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	885b      	ldrh	r3, [r3, #2]
 800549c:	b29a      	uxth	r2, r3
 800549e:	897b      	ldrh	r3, [r7, #10]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d8e5      	bhi.n	8005470 <USBD_GetEpDesc+0x32>
 80054a4:	e000      	b.n	80054a8 <USBD_GetEpDesc+0x6a>
          break;
 80054a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80054a8:	693b      	ldr	r3, [r7, #16]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	881a      	ldrh	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4413      	add	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800550a:	8a3b      	ldrh	r3, [r7, #16]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	b21a      	sxth	r2, r3
 8005510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005514:	4313      	orrs	r3, r2
 8005516:	b21b      	sxth	r3, r3
 8005518:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800551a:	89fb      	ldrh	r3, [r7, #14]
}
 800551c:	4618      	mov	r0, r3
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d005      	beq.n	800554e <USBD_StdDevReq+0x26>
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d857      	bhi.n	80055f6 <USBD_StdDevReq+0xce>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00f      	beq.n	800556a <USBD_StdDevReq+0x42>
 800554a:	2b20      	cmp	r3, #32
 800554c:	d153      	bne.n	80055f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	32ae      	adds	r2, #174	; 0xae
 8005558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	4798      	blx	r3
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
      break;
 8005568:	e04a      	b.n	8005600 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	2b09      	cmp	r3, #9
 8005570:	d83b      	bhi.n	80055ea <USBD_StdDevReq+0xc2>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <USBD_StdDevReq+0x50>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080055cd 	.word	0x080055cd
 800557c:	080055e1 	.word	0x080055e1
 8005580:	080055eb 	.word	0x080055eb
 8005584:	080055d7 	.word	0x080055d7
 8005588:	080055eb 	.word	0x080055eb
 800558c:	080055ab 	.word	0x080055ab
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055eb 	.word	0x080055eb
 8005598:	080055c3 	.word	0x080055c3
 800559c:	080055b5 	.word	0x080055b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa3c 	bl	8005a20 <USBD_GetDescriptor>
          break;
 80055a8:	e024      	b.n	80055f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fba1 	bl	8005cf4 <USBD_SetAddress>
          break;
 80055b2:	e01f      	b.n	80055f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fbe0 	bl	8005d7c <USBD_SetConfig>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]
          break;
 80055c0:	e018      	b.n	80055f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fc83 	bl	8005ed0 <USBD_GetConfig>
          break;
 80055ca:	e013      	b.n	80055f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fcb4 	bl	8005f3c <USBD_GetStatus>
          break;
 80055d4:	e00e      	b.n	80055f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fce3 	bl	8005fa4 <USBD_SetFeature>
          break;
 80055de:	e009      	b.n	80055f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fd07 	bl	8005ff6 <USBD_ClrFeature>
          break;
 80055e8:	e004      	b.n	80055f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fd5e 	bl	80060ae <USBD_CtlError>
          break;
 80055f2:	bf00      	nop
      }
      break;
 80055f4:	e004      	b.n	8005600 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fd58 	bl	80060ae <USBD_CtlError>
      break;
 80055fe:	bf00      	nop
  }

  return ret;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop

0800560c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d005      	beq.n	8005632 <USBD_StdItfReq+0x26>
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d852      	bhi.n	80056d0 <USBD_StdItfReq+0xc4>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <USBD_StdItfReq+0x26>
 800562e:	2b20      	cmp	r3, #32
 8005630:	d14e      	bne.n	80056d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005638:	b2db      	uxtb	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	2b02      	cmp	r3, #2
 800563e:	d840      	bhi.n	80056c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	889b      	ldrh	r3, [r3, #4]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d836      	bhi.n	80056b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	889b      	ldrh	r3, [r3, #4]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fed9 	bl	800540a <USBD_CoreFindIF>
 8005658:	4603      	mov	r3, r0
 800565a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800565c:	7bbb      	ldrb	r3, [r7, #14]
 800565e:	2bff      	cmp	r3, #255	; 0xff
 8005660:	d01d      	beq.n	800569e <USBD_StdItfReq+0x92>
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11a      	bne.n	800569e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005668:	7bba      	ldrb	r2, [r7, #14]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	32ae      	adds	r2, #174	; 0xae
 800566e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00f      	beq.n	8005698 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005678:	7bba      	ldrb	r2, [r7, #14]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005680:	7bba      	ldrb	r2, [r7, #14]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	32ae      	adds	r2, #174	; 0xae
 8005686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005696:	e004      	b.n	80056a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005698:	2303      	movs	r3, #3
 800569a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800569c:	e001      	b.n	80056a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800569e:	2303      	movs	r3, #3
 80056a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	88db      	ldrh	r3, [r3, #6]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d110      	bne.n	80056cc <USBD_StdItfReq+0xc0>
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10d      	bne.n	80056cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fdd3 	bl	800625c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056b6:	e009      	b.n	80056cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fcf7 	bl	80060ae <USBD_CtlError>
          break;
 80056c0:	e004      	b.n	80056cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fcf2 	bl	80060ae <USBD_CtlError>
          break;
 80056ca:	e000      	b.n	80056ce <USBD_StdItfReq+0xc2>
          break;
 80056cc:	bf00      	nop
      }
      break;
 80056ce:	e004      	b.n	80056da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fceb 	bl	80060ae <USBD_CtlError>
      break;
 80056d8:	bf00      	nop
  }

  return ret;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	889b      	ldrh	r3, [r3, #4]
 80056f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d007      	beq.n	8005714 <USBD_StdEPReq+0x30>
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	f200 817f 	bhi.w	8005a08 <USBD_StdEPReq+0x324>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d02a      	beq.n	8005764 <USBD_StdEPReq+0x80>
 800570e:	2b20      	cmp	r3, #32
 8005710:	f040 817a 	bne.w	8005a08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fe83 	bl	8005424 <USBD_CoreFindEP>
 800571e:	4603      	mov	r3, r0
 8005720:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005722:	7b7b      	ldrb	r3, [r7, #13]
 8005724:	2bff      	cmp	r3, #255	; 0xff
 8005726:	f000 8174 	beq.w	8005a12 <USBD_StdEPReq+0x32e>
 800572a:	7b7b      	ldrb	r3, [r7, #13]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 8170 	bne.w	8005a12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005732:	7b7a      	ldrb	r2, [r7, #13]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800573a:	7b7a      	ldrb	r2, [r7, #13]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	32ae      	adds	r2, #174	; 0xae
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8163 	beq.w	8005a12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800574c:	7b7a      	ldrb	r2, [r7, #13]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	32ae      	adds	r2, #174	; 0xae
 8005752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
 800575e:	4603      	mov	r3, r0
 8005760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005762:	e156      	b.n	8005a12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d008      	beq.n	800577e <USBD_StdEPReq+0x9a>
 800576c:	2b03      	cmp	r3, #3
 800576e:	f300 8145 	bgt.w	80059fc <USBD_StdEPReq+0x318>
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 809b 	beq.w	80058ae <USBD_StdEPReq+0x1ca>
 8005778:	2b01      	cmp	r3, #1
 800577a:	d03c      	beq.n	80057f6 <USBD_StdEPReq+0x112>
 800577c:	e13e      	b.n	80059fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d002      	beq.n	8005790 <USBD_StdEPReq+0xac>
 800578a:	2b03      	cmp	r3, #3
 800578c:	d016      	beq.n	80057bc <USBD_StdEPReq+0xd8>
 800578e:	e02c      	b.n	80057ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <USBD_StdEPReq+0xce>
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	d00a      	beq.n	80057b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800579c:	7bbb      	ldrb	r3, [r7, #14]
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f953 	bl	8006a4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f94f 	bl	8006a4c <USBD_LL_StallEP>
 80057ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057b0:	e020      	b.n	80057f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc7a 	bl	80060ae <USBD_CtlError>
              break;
 80057ba:	e01b      	b.n	80057f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	885b      	ldrh	r3, [r3, #2]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10e      	bne.n	80057e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <USBD_StdEPReq+0xfe>
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d008      	beq.n	80057e2 <USBD_StdEPReq+0xfe>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	88db      	ldrh	r3, [r3, #6]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 f935 	bl	8006a4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fd3a 	bl	800625c <USBD_CtlSendStatus>

              break;
 80057e8:	e004      	b.n	80057f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fc5e 	bl	80060ae <USBD_CtlError>
              break;
 80057f2:	bf00      	nop
          }
          break;
 80057f4:	e107      	b.n	8005a06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d002      	beq.n	8005808 <USBD_StdEPReq+0x124>
 8005802:	2b03      	cmp	r3, #3
 8005804:	d016      	beq.n	8005834 <USBD_StdEPReq+0x150>
 8005806:	e04b      	b.n	80058a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <USBD_StdEPReq+0x146>
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d00a      	beq.n	800582a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 f917 	bl	8006a4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800581e:	2180      	movs	r1, #128	; 0x80
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 f913 	bl	8006a4c <USBD_LL_StallEP>
 8005826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005828:	e040      	b.n	80058ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fc3e 	bl	80060ae <USBD_CtlError>
              break;
 8005832:	e03b      	b.n	80058ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	885b      	ldrh	r3, [r3, #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d136      	bne.n	80058aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 f91d 	bl	8006a8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fd03 	bl	800625c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fde2 	bl	8005424 <USBD_CoreFindEP>
 8005860:	4603      	mov	r3, r0
 8005862:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005864:	7b7b      	ldrb	r3, [r7, #13]
 8005866:	2bff      	cmp	r3, #255	; 0xff
 8005868:	d01f      	beq.n	80058aa <USBD_StdEPReq+0x1c6>
 800586a:	7b7b      	ldrb	r3, [r7, #13]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d11c      	bne.n	80058aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005870:	7b7a      	ldrb	r2, [r7, #13]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005878:	7b7a      	ldrb	r2, [r7, #13]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	32ae      	adds	r2, #174	; 0xae
 800587e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005888:	7b7a      	ldrb	r2, [r7, #13]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800589e:	e004      	b.n	80058aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fc03 	bl	80060ae <USBD_CtlError>
              break;
 80058a8:	e000      	b.n	80058ac <USBD_StdEPReq+0x1c8>
              break;
 80058aa:	bf00      	nop
          }
          break;
 80058ac:	e0ab      	b.n	8005a06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d002      	beq.n	80058c0 <USBD_StdEPReq+0x1dc>
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d032      	beq.n	8005924 <USBD_StdEPReq+0x240>
 80058be:	e097      	b.n	80059f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <USBD_StdEPReq+0x1f2>
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	2b80      	cmp	r3, #128	; 0x80
 80058ca:	d004      	beq.n	80058d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fbed 	bl	80060ae <USBD_CtlError>
                break;
 80058d4:	e091      	b.n	80059fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da0b      	bge.n	80058f6 <USBD_StdEPReq+0x212>
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	3310      	adds	r3, #16
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	3304      	adds	r3, #4
 80058f4:	e00b      	b.n	800590e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	4413      	add	r3, r2
 800590c:	3304      	adds	r3, #4
 800590e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2202      	movs	r2, #2
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fc43 	bl	80061a8 <USBD_CtlSendData>
              break;
 8005922:	e06a      	b.n	80059fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005928:	2b00      	cmp	r3, #0
 800592a:	da11      	bge.n	8005950 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	3324      	adds	r3, #36	; 0x24
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d117      	bne.n	8005976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fbb0 	bl	80060ae <USBD_CtlError>
                  break;
 800594e:	e054      	b.n	80059fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	f003 020f 	and.w	r2, r3, #15
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fb9d 	bl	80060ae <USBD_CtlError>
                  break;
 8005974:	e041      	b.n	80059fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da0b      	bge.n	8005996 <USBD_StdEPReq+0x2b2>
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	3310      	adds	r3, #16
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	3304      	adds	r3, #4
 8005994:	e00b      	b.n	80059ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4413      	add	r3, r2
 80059ac:	3304      	adds	r3, #4
 80059ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <USBD_StdEPReq+0x2d8>
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d103      	bne.n	80059c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e00e      	b.n	80059e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f87d 	bl	8006ac8 <USBD_LL_IsStallEP>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e002      	b.n	80059e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2202      	movs	r2, #2
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fbdd 	bl	80061a8 <USBD_CtlSendData>
              break;
 80059ee:	e004      	b.n	80059fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fb5b 	bl	80060ae <USBD_CtlError>
              break;
 80059f8:	bf00      	nop
          }
          break;
 80059fa:	e004      	b.n	8005a06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fb55 	bl	80060ae <USBD_CtlError>
          break;
 8005a04:	bf00      	nop
      }
      break;
 8005a06:	e005      	b.n	8005a14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fb4f 	bl	80060ae <USBD_CtlError>
      break;
 8005a10:	e000      	b.n	8005a14 <USBD_StdEPReq+0x330>
      break;
 8005a12:	bf00      	nop
  }

  return ret;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	885b      	ldrh	r3, [r3, #2]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2b06      	cmp	r3, #6
 8005a42:	f200 8128 	bhi.w	8005c96 <USBD_GetDescriptor+0x276>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <USBD_GetDescriptor+0x2c>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a69 	.word	0x08005a69
 8005a50:	08005a81 	.word	0x08005a81
 8005a54:	08005ac1 	.word	0x08005ac1
 8005a58:	08005c97 	.word	0x08005c97
 8005a5c:	08005c97 	.word	0x08005c97
 8005a60:	08005c37 	.word	0x08005c37
 8005a64:	08005c63 	.word	0x08005c63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	7c12      	ldrb	r2, [r2, #16]
 8005a74:	f107 0108 	add.w	r1, r7, #8
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
 8005a7c:	60f8      	str	r0, [r7, #12]
      break;
 8005a7e:	e112      	b.n	8005ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	7c1b      	ldrb	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10d      	bne.n	8005aa4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f107 0208 	add.w	r2, r7, #8
 8005a94:	4610      	mov	r0, r2
 8005a96:	4798      	blx	r3
 8005a98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005aa2:	e100      	b.n	8005ca6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	f107 0208 	add.w	r2, r7, #8
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
 8005ab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	2202      	movs	r2, #2
 8005abc:	701a      	strb	r2, [r3, #0]
      break;
 8005abe:	e0f2      	b.n	8005ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	885b      	ldrh	r3, [r3, #2]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	f200 80ac 	bhi.w	8005c24 <USBD_GetDescriptor+0x204>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <USBD_GetDescriptor+0xb4>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005aed 	.word	0x08005aed
 8005ad8:	08005b21 	.word	0x08005b21
 8005adc:	08005b55 	.word	0x08005b55
 8005ae0:	08005b89 	.word	0x08005b89
 8005ae4:	08005bbd 	.word	0x08005bbd
 8005ae8:	08005bf1 	.word	0x08005bf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	7c12      	ldrb	r2, [r2, #16]
 8005b04:	f107 0108 	add.w	r1, r7, #8
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b0e:	e091      	b.n	8005c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 facb 	bl	80060ae <USBD_CtlError>
            err++;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b1e:	e089      	b.n	8005c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7c12      	ldrb	r2, [r2, #16]
 8005b38:	f107 0108 	add.w	r1, r7, #8
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
 8005b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b42:	e077      	b.n	8005c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fab1 	bl	80060ae <USBD_CtlError>
            err++;
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	72fb      	strb	r3, [r7, #11]
          break;
 8005b52:	e06f      	b.n	8005c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	7c12      	ldrb	r2, [r2, #16]
 8005b6c:	f107 0108 	add.w	r1, r7, #8
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b76:	e05d      	b.n	8005c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa97 	bl	80060ae <USBD_CtlError>
            err++;
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	3301      	adds	r3, #1
 8005b84:	72fb      	strb	r3, [r7, #11]
          break;
 8005b86:	e055      	b.n	8005c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	7c12      	ldrb	r2, [r2, #16]
 8005ba0:	f107 0108 	add.w	r1, r7, #8
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005baa:	e043      	b.n	8005c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa7d 	bl	80060ae <USBD_CtlError>
            err++;
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bba:	e03b      	b.n	8005c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	7c12      	ldrb	r2, [r2, #16]
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4798      	blx	r3
 8005bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bde:	e029      	b.n	8005c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa63 	bl	80060ae <USBD_CtlError>
            err++;
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	3301      	adds	r3, #1
 8005bec:	72fb      	strb	r3, [r7, #11]
          break;
 8005bee:	e021      	b.n	8005c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	7c12      	ldrb	r2, [r2, #16]
 8005c08:	f107 0108 	add.w	r1, r7, #8
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c12:	e00f      	b.n	8005c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa49 	bl	80060ae <USBD_CtlError>
            err++;
 8005c1c:	7afb      	ldrb	r3, [r7, #11]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	72fb      	strb	r3, [r7, #11]
          break;
 8005c22:	e007      	b.n	8005c34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa41 	bl	80060ae <USBD_CtlError>
          err++;
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005c32:	bf00      	nop
      }
      break;
 8005c34:	e037      	b.n	8005ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	7c1b      	ldrb	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	f107 0208 	add.w	r2, r7, #8
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4798      	blx	r3
 8005c4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c50:	e029      	b.n	8005ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fa2a 	bl	80060ae <USBD_CtlError>
        err++;
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c60:	e021      	b.n	8005ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	7c1b      	ldrb	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10d      	bne.n	8005c86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f107 0208 	add.w	r2, r7, #8
 8005c76:	4610      	mov	r0, r2
 8005c78:	4798      	blx	r3
 8005c7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	2207      	movs	r2, #7
 8005c82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c84:	e00f      	b.n	8005ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fa10 	bl	80060ae <USBD_CtlError>
        err++;
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	3301      	adds	r3, #1
 8005c92:	72fb      	strb	r3, [r7, #11]
      break;
 8005c94:	e007      	b.n	8005ca6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa08 	bl	80060ae <USBD_CtlError>
      err++;
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ca4:	bf00      	nop
  }

  if (err != 0U)
 8005ca6:	7afb      	ldrb	r3, [r7, #11]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d11e      	bne.n	8005cea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	88db      	ldrh	r3, [r3, #6]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d016      	beq.n	8005ce2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005cb4:	893b      	ldrh	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00e      	beq.n	8005cd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	88da      	ldrh	r2, [r3, #6]
 8005cbe:	893b      	ldrh	r3, [r7, #8]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bf28      	it	cs
 8005cc4:	4613      	movcs	r3, r2
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cca:	893b      	ldrh	r3, [r7, #8]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fa69 	bl	80061a8 <USBD_CtlSendData>
 8005cd6:	e009      	b.n	8005cec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f9e7 	bl	80060ae <USBD_CtlError>
 8005ce0:	e004      	b.n	8005cec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 faba 	bl	800625c <USBD_CtlSendStatus>
 8005ce8:	e000      	b.n	8005cec <USBD_GetDescriptor+0x2cc>
    return;
 8005cea:	bf00      	nop
  }
}
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop

08005cf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	889b      	ldrh	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d131      	bne.n	8005d6a <USBD_SetAddress+0x76>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	88db      	ldrh	r3, [r3, #6]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d12d      	bne.n	8005d6a <USBD_SetAddress+0x76>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	885b      	ldrh	r3, [r3, #2]
 8005d12:	2b7f      	cmp	r3, #127	; 0x7f
 8005d14:	d829      	bhi.n	8005d6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	885b      	ldrh	r3, [r3, #2]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d104      	bne.n	8005d38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f9bc 	bl	80060ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d36:	e01d      	b.n	8005d74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7bfa      	ldrb	r2, [r7, #15]
 8005d3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 feeb 	bl	8006b20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa86 	bl	800625c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d004      	beq.n	8005d60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d5e:	e009      	b.n	8005d74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d68:	e004      	b.n	8005d74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f99e 	bl	80060ae <USBD_CtlError>
  }
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	885b      	ldrh	r3, [r3, #2]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	4b4e      	ldr	r3, [pc, #312]	; (8005ecc <USBD_SetConfig+0x150>)
 8005d92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d94:	4b4d      	ldr	r3, [pc, #308]	; (8005ecc <USBD_SetConfig+0x150>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d905      	bls.n	8005da8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f985 	bl	80060ae <USBD_CtlError>
    return USBD_FAIL;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e08c      	b.n	8005ec2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d002      	beq.n	8005dba <USBD_SetConfig+0x3e>
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d029      	beq.n	8005e0c <USBD_SetConfig+0x90>
 8005db8:	e075      	b.n	8005ea6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005dba:	4b44      	ldr	r3, [pc, #272]	; (8005ecc <USBD_SetConfig+0x150>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d020      	beq.n	8005e04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005dc2:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <USBD_SetConfig+0x150>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005dcc:	4b3f      	ldr	r3, [pc, #252]	; (8005ecc <USBD_SetConfig+0x150>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fe ffe1 	bl	8004d9a <USBD_SetClassConfig>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d008      	beq.n	8005df4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f962 	bl	80060ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005df2:	e065      	b.n	8005ec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa31 	bl	800625c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e02:	e05d      	b.n	8005ec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa29 	bl	800625c <USBD_CtlSendStatus>
      break;
 8005e0a:	e059      	b.n	8005ec0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005e0c:	4b2f      	ldr	r3, [pc, #188]	; (8005ecc <USBD_SetConfig+0x150>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d112      	bne.n	8005e3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <USBD_SetConfig+0x150>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e26:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <USBD_SetConfig+0x150>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7fe ffd0 	bl	8004dd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa12 	bl	800625c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e38:	e042      	b.n	8005ec0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <USBD_SetConfig+0x150>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d02a      	beq.n	8005e9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7fe ffbe 	bl	8004dd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e56:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <USBD_SetConfig+0x150>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e60:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <USBD_SetConfig+0x150>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fe ff97 	bl	8004d9a <USBD_SetClassConfig>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f918 	bl	80060ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fe ffa3 	bl	8004dd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e94:	e014      	b.n	8005ec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f9e0 	bl	800625c <USBD_CtlSendStatus>
      break;
 8005e9c:	e010      	b.n	8005ec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9dc 	bl	800625c <USBD_CtlSendStatus>
      break;
 8005ea4:	e00c      	b.n	8005ec0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f900 	bl	80060ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <USBD_SetConfig+0x150>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7fe ff8c 	bl	8004dd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebe:	bf00      	nop
  }

  return ret;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000120 	.word	0x20000120

08005ed0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	88db      	ldrh	r3, [r3, #6]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d004      	beq.n	8005eec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f8e2 	bl	80060ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005eea:	e023      	b.n	8005f34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	dc02      	bgt.n	8005efe <USBD_GetConfig+0x2e>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc03      	bgt.n	8005f04 <USBD_GetConfig+0x34>
 8005efc:	e015      	b.n	8005f2a <USBD_GetConfig+0x5a>
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d00b      	beq.n	8005f1a <USBD_GetConfig+0x4a>
 8005f02:	e012      	b.n	8005f2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f948 	bl	80061a8 <USBD_CtlSendData>
        break;
 8005f18:	e00c      	b.n	8005f34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f940 	bl	80061a8 <USBD_CtlSendData>
        break;
 8005f28:	e004      	b.n	8005f34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8be 	bl	80060ae <USBD_CtlError>
        break;
 8005f32:	bf00      	nop
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d81e      	bhi.n	8005f92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	88db      	ldrh	r3, [r3, #6]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d004      	beq.n	8005f66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8a5 	bl	80060ae <USBD_CtlError>
        break;
 8005f64:	e01a      	b.n	8005f9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	330c      	adds	r3, #12
 8005f86:	2202      	movs	r2, #2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f90c 	bl	80061a8 <USBD_CtlSendData>
      break;
 8005f90:	e004      	b.n	8005f9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f88a 	bl	80060ae <USBD_CtlError>
      break;
 8005f9a:	bf00      	nop
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	885b      	ldrh	r3, [r3, #2]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f94c 	bl	800625c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005fc4:	e013      	b.n	8005fee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	885b      	ldrh	r3, [r3, #2]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d10b      	bne.n	8005fe6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	889b      	ldrh	r3, [r3, #4]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f93c 	bl	800625c <USBD_CtlSendStatus>
}
 8005fe4:	e003      	b.n	8005fee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f860 	bl	80060ae <USBD_CtlError>
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006006:	b2db      	uxtb	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	2b02      	cmp	r3, #2
 800600c:	d80b      	bhi.n	8006026 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	885b      	ldrh	r3, [r3, #2]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d10c      	bne.n	8006030 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f91c 	bl	800625c <USBD_CtlSendStatus>
      }
      break;
 8006024:	e004      	b.n	8006030 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f840 	bl	80060ae <USBD_CtlError>
      break;
 800602e:	e000      	b.n	8006032 <USBD_ClrFeature+0x3c>
      break;
 8006030:	bf00      	nop
  }
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff fa41 	bl	80054ec <SWAPBYTE>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3301      	adds	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff fa34 	bl	80054ec <SWAPBYTE>
 8006084:	4603      	mov	r3, r0
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3301      	adds	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff fa27 	bl	80054ec <SWAPBYTE>
 800609e:	4603      	mov	r3, r0
 80060a0:	461a      	mov	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	80da      	strh	r2, [r3, #6]
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fcc6 	bl	8006a4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060c0:	2100      	movs	r1, #0
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fcc2 	bl	8006a4c <USBD_LL_StallEP>
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d042      	beq.n	800616c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80060ea:	6938      	ldr	r0, [r7, #16]
 80060ec:	f000 f842 	bl	8006174 <USBD_GetLen>
 80060f0:	4603      	mov	r3, r0
 80060f2:	3301      	adds	r3, #1
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fa:	d808      	bhi.n	800610e <USBD_GetString+0x3e>
 80060fc:	6938      	ldr	r0, [r7, #16]
 80060fe:	f000 f839 	bl	8006174 <USBD_GetLen>
 8006102:	4603      	mov	r3, r0
 8006104:	3301      	adds	r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	e001      	b.n	8006112 <USBD_GetString+0x42>
 800610e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006116:	7dfb      	ldrb	r3, [r7, #23]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	4413      	add	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	7812      	ldrb	r2, [r2, #0]
 8006120:	701a      	strb	r2, [r3, #0]
  idx++;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	3301      	adds	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4413      	add	r3, r2
 800612e:	2203      	movs	r2, #3
 8006130:	701a      	strb	r2, [r3, #0]
  idx++;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	3301      	adds	r3, #1
 8006136:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006138:	e013      	b.n	8006162 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	4413      	add	r3, r2
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	7812      	ldrb	r2, [r2, #0]
 8006144:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3301      	adds	r3, #1
 800614a:	613b      	str	r3, [r7, #16]
    idx++;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
 800614e:	3301      	adds	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	4413      	add	r3, r2
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
    idx++;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	3301      	adds	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e7      	bne.n	800613a <USBD_GetString+0x6a>
 800616a:	e000      	b.n	800616e <USBD_GetString+0x9e>
    return;
 800616c:	bf00      	nop
  }
}
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006184:	e005      	b.n	8006192 <USBD_GetLen+0x1e>
  {
    len++;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	3301      	adds	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3301      	adds	r3, #1
 8006190:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f5      	bne.n	8006186 <USBD_GetLen+0x12>
  }

  return len;
 800619a:	7bfb      	ldrb	r3, [r7, #15]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	2100      	movs	r1, #0
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fcc5 	bl	8006b5e <USBD_LL_Transmit>

  return USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	2100      	movs	r1, #0
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fcb4 	bl	8006b5e <USBD_LL_Transmit>

  return USBD_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2203      	movs	r2, #3
 8006210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	2100      	movs	r1, #0
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fcb8 	bl	8006ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	2100      	movs	r1, #0
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fca7 	bl	8006ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2204      	movs	r2, #4
 8006268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800626c:	2300      	movs	r3, #0
 800626e:	2200      	movs	r2, #0
 8006270:	2100      	movs	r1, #0
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fc73 	bl	8006b5e <USBD_LL_Transmit>

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2205      	movs	r2, #5
 800628e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006292:	2300      	movs	r3, #0
 8006294:	2200      	movs	r2, #0
 8006296:	2100      	movs	r1, #0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fc81 	bl	8006ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062ac:	2200      	movs	r2, #0
 80062ae:	4912      	ldr	r1, [pc, #72]	; (80062f8 <MX_USB_DEVICE_Init+0x50>)
 80062b0:	4812      	ldr	r0, [pc, #72]	; (80062fc <MX_USB_DEVICE_Init+0x54>)
 80062b2:	f7fe fcf5 	bl	8004ca0 <USBD_Init>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062bc:	f7fa fa28 	bl	8000710 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062c0:	490f      	ldr	r1, [pc, #60]	; (8006300 <MX_USB_DEVICE_Init+0x58>)
 80062c2:	480e      	ldr	r0, [pc, #56]	; (80062fc <MX_USB_DEVICE_Init+0x54>)
 80062c4:	f7fe fd1c 	bl	8004d00 <USBD_RegisterClass>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062ce:	f7fa fa1f 	bl	8000710 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062d2:	490c      	ldr	r1, [pc, #48]	; (8006304 <MX_USB_DEVICE_Init+0x5c>)
 80062d4:	4809      	ldr	r0, [pc, #36]	; (80062fc <MX_USB_DEVICE_Init+0x54>)
 80062d6:	f7fe fc53 	bl	8004b80 <USBD_CDC_RegisterInterface>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80062e0:	f7fa fa16 	bl	8000710 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062e4:	4805      	ldr	r0, [pc, #20]	; (80062fc <MX_USB_DEVICE_Init+0x54>)
 80062e6:	f7fe fd41 	bl	8004d6c <USBD_Start>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80062f0:	f7fa fa0e 	bl	8000710 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062f4:	bf00      	nop
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	200000ac 	.word	0x200000ac
 80062fc:	20000124 	.word	0x20000124
 8006300:	20000018 	.word	0x20000018
 8006304:	20000098 	.word	0x20000098

08006308 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800630c:	2200      	movs	r2, #0
 800630e:	4905      	ldr	r1, [pc, #20]	; (8006324 <CDC_Init_FS+0x1c>)
 8006310:	4805      	ldr	r0, [pc, #20]	; (8006328 <CDC_Init_FS+0x20>)
 8006312:	f7fe fc4f 	bl	8004bb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006316:	4905      	ldr	r1, [pc, #20]	; (800632c <CDC_Init_FS+0x24>)
 8006318:	4803      	ldr	r0, [pc, #12]	; (8006328 <CDC_Init_FS+0x20>)
 800631a:	f7fe fc6d 	bl	8004bf8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800631e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006320:	4618      	mov	r0, r3
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000c00 	.word	0x20000c00
 8006328:	20000124 	.word	0x20000124
 800632c:	20000400 	.word	0x20000400

08006330 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006334:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006336:	4618      	mov	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	6039      	str	r1, [r7, #0]
 800634a:	71fb      	strb	r3, [r7, #7]
 800634c:	4613      	mov	r3, r2
 800634e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	2b23      	cmp	r3, #35	; 0x23
 8006354:	d84a      	bhi.n	80063ec <CDC_Control_FS+0xac>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <CDC_Control_FS+0x1c>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	080063ed 	.word	0x080063ed
 8006360:	080063ed 	.word	0x080063ed
 8006364:	080063ed 	.word	0x080063ed
 8006368:	080063ed 	.word	0x080063ed
 800636c:	080063ed 	.word	0x080063ed
 8006370:	080063ed 	.word	0x080063ed
 8006374:	080063ed 	.word	0x080063ed
 8006378:	080063ed 	.word	0x080063ed
 800637c:	080063ed 	.word	0x080063ed
 8006380:	080063ed 	.word	0x080063ed
 8006384:	080063ed 	.word	0x080063ed
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080063ed 	.word	0x080063ed
 8006390:	080063ed 	.word	0x080063ed
 8006394:	080063ed 	.word	0x080063ed
 8006398:	080063ed 	.word	0x080063ed
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063ed 	.word	0x080063ed
 80063a8:	080063ed 	.word	0x080063ed
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	080063ed 	.word	0x080063ed
 80063b4:	080063ed 	.word	0x080063ed
 80063b8:	080063ed 	.word	0x080063ed
 80063bc:	080063ed 	.word	0x080063ed
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	080063ed 	.word	0x080063ed
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063ed 	.word	0x080063ed
 80063d0:	080063ed 	.word	0x080063ed
 80063d4:	080063ed 	.word	0x080063ed
 80063d8:	080063ed 	.word	0x080063ed
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	080063ed 	.word	0x080063ed
 80063e4:	080063ed 	.word	0x080063ed
 80063e8:	080063ed 	.word	0x080063ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80063ec:	bf00      	nop
  }

  return (USBD_OK);
 80063ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	4805      	ldr	r0, [pc, #20]	; (8006420 <CDC_Receive_FS+0x24>)
 800640a:	f7fe fbf5 	bl	8004bf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800640e:	4804      	ldr	r0, [pc, #16]	; (8006420 <CDC_Receive_FS+0x24>)
 8006410:	f7fe fc10 	bl	8004c34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006414:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000124 	.word	0x20000124

08006424 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800643a:	4618      	mov	r0, r3
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	6039      	str	r1, [r7, #0]
 8006452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2212      	movs	r2, #18
 8006458:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800645a:	4b03      	ldr	r3, [pc, #12]	; (8006468 <USBD_FS_DeviceDescriptor+0x20>)
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	200000c8 	.word	0x200000c8

0800646c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2204      	movs	r2, #4
 800647c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800647e:	4b03      	ldr	r3, [pc, #12]	; (800648c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	200000dc 	.word	0x200000dc

08006490 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	6039      	str	r1, [r7, #0]
 800649a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d105      	bne.n	80064ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4907      	ldr	r1, [pc, #28]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80064a6:	4808      	ldr	r0, [pc, #32]	; (80064c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80064a8:	f7ff fe12 	bl	80060d0 <USBD_GetString>
 80064ac:	e004      	b.n	80064b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	4904      	ldr	r1, [pc, #16]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80064b2:	4805      	ldr	r0, [pc, #20]	; (80064c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80064b4:	f7ff fe0c 	bl	80060d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064b8:	4b02      	ldr	r3, [pc, #8]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20001400 	.word	0x20001400
 80064c8:	08006d00 	.word	0x08006d00

080064cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	6039      	str	r1, [r7, #0]
 80064d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	4904      	ldr	r1, [pc, #16]	; (80064ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064dc:	4804      	ldr	r0, [pc, #16]	; (80064f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064de:	f7ff fdf7 	bl	80060d0 <USBD_GetString>
  return USBD_StrDesc;
 80064e2:	4b02      	ldr	r3, [pc, #8]	; (80064ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20001400 	.word	0x20001400
 80064f0:	08006d18 	.word	0x08006d18

080064f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	6039      	str	r1, [r7, #0]
 80064fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	221a      	movs	r2, #26
 8006504:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006506:	f000 f843 	bl	8006590 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800650a:	4b02      	ldr	r3, [pc, #8]	; (8006514 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	200000e0 	.word	0x200000e0

08006518 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	6039      	str	r1, [r7, #0]
 8006522:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	4907      	ldr	r1, [pc, #28]	; (800654c <USBD_FS_ConfigStrDescriptor+0x34>)
 800652e:	4808      	ldr	r0, [pc, #32]	; (8006550 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006530:	f7ff fdce 	bl	80060d0 <USBD_GetString>
 8006534:	e004      	b.n	8006540 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	4904      	ldr	r1, [pc, #16]	; (800654c <USBD_FS_ConfigStrDescriptor+0x34>)
 800653a:	4805      	ldr	r0, [pc, #20]	; (8006550 <USBD_FS_ConfigStrDescriptor+0x38>)
 800653c:	f7ff fdc8 	bl	80060d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006540:	4b02      	ldr	r3, [pc, #8]	; (800654c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20001400 	.word	0x20001400
 8006550:	08006d2c 	.word	0x08006d2c

08006554 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	6039      	str	r1, [r7, #0]
 800655e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d105      	bne.n	8006572 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	4907      	ldr	r1, [pc, #28]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800656a:	4808      	ldr	r0, [pc, #32]	; (800658c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800656c:	f7ff fdb0 	bl	80060d0 <USBD_GetString>
 8006570:	e004      	b.n	800657c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	4904      	ldr	r1, [pc, #16]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006576:	4805      	ldr	r0, [pc, #20]	; (800658c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006578:	f7ff fdaa 	bl	80060d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800657c:	4b02      	ldr	r3, [pc, #8]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20001400 	.word	0x20001400
 800658c:	08006d38 	.word	0x08006d38

08006590 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <Get_SerialNum+0x44>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <Get_SerialNum+0x48>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <Get_SerialNum+0x4c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4413      	add	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065b6:	2208      	movs	r2, #8
 80065b8:	4909      	ldr	r1, [pc, #36]	; (80065e0 <Get_SerialNum+0x50>)
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f814 	bl	80065e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065c0:	2204      	movs	r2, #4
 80065c2:	4908      	ldr	r1, [pc, #32]	; (80065e4 <Get_SerialNum+0x54>)
 80065c4:	68b8      	ldr	r0, [r7, #8]
 80065c6:	f000 f80f 	bl	80065e8 <IntToUnicode>
  }
}
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	1fff7a10 	.word	0x1fff7a10
 80065d8:	1fff7a14 	.word	0x1fff7a14
 80065dc:	1fff7a18 	.word	0x1fff7a18
 80065e0:	200000e2 	.word	0x200000e2
 80065e4:	200000f2 	.word	0x200000f2

080065e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065fa:	2300      	movs	r3, #0
 80065fc:	75fb      	strb	r3, [r7, #23]
 80065fe:	e027      	b.n	8006650 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	0f1b      	lsrs	r3, r3, #28
 8006604:	2b09      	cmp	r3, #9
 8006606:	d80b      	bhi.n	8006620 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	0f1b      	lsrs	r3, r3, #28
 800660c:	b2da      	uxtb	r2, r3
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4619      	mov	r1, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	440b      	add	r3, r1
 8006618:	3230      	adds	r2, #48	; 0x30
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e00a      	b.n	8006636 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	0f1b      	lsrs	r3, r3, #28
 8006624:	b2da      	uxtb	r2, r3
 8006626:	7dfb      	ldrb	r3, [r7, #23]
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4619      	mov	r1, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	440b      	add	r3, r1
 8006630:	3237      	adds	r2, #55	; 0x37
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	3301      	adds	r3, #1
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	4413      	add	r3, r2
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	3301      	adds	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
 8006650:	7dfa      	ldrb	r2, [r7, #23]
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	429a      	cmp	r2, r3
 8006656:	d3d3      	bcc.n	8006600 <IntToUnicode+0x18>
  }
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006688:	d13a      	bne.n	8006700 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	4b1e      	ldr	r3, [pc, #120]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 8006694:	f043 0301 	orr.w	r3, r3, #1
 8006698:	6313      	str	r3, [r2, #48]	; 0x30
 800669a:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80066a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80066aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ac:	2302      	movs	r3, #2
 80066ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066b4:	2303      	movs	r3, #3
 80066b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066b8:	230a      	movs	r3, #10
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	4619      	mov	r1, r3
 80066c2:	4812      	ldr	r0, [pc, #72]	; (800670c <HAL_PCD_MspInit+0xa4>)
 80066c4:	f7fa fa6a 	bl	8000b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066c8:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 80066ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066cc:	4a0e      	ldr	r2, [pc, #56]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 80066ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d2:	6353      	str	r3, [r2, #52]	; 0x34
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	4a0a      	ldr	r2, [pc, #40]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 80066de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066e2:	6453      	str	r3, [r2, #68]	; 0x44
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <HAL_PCD_MspInit+0xa0>)
 80066e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066f0:	2200      	movs	r2, #0
 80066f2:	2100      	movs	r1, #0
 80066f4:	2043      	movs	r0, #67	; 0x43
 80066f6:	f7fa fa1a 	bl	8000b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066fa:	2043      	movs	r0, #67	; 0x43
 80066fc:	f7fa fa33 	bl	8000b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006700:	bf00      	nop
 8006702:	3728      	adds	r7, #40	; 0x28
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40023800 	.word	0x40023800
 800670c:	40020000 	.word	0x40020000

08006710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f7fe fb6d 	bl	8004e06 <USBD_LL_SetupStage>
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	4619      	mov	r1, r3
 800675e:	f7fe fba7 	bl	8004eb0 <USBD_LL_DataOutStage>
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	460b      	mov	r3, r1
 8006774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800677c:	78fa      	ldrb	r2, [r7, #3]
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	3320      	adds	r3, #32
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	4619      	mov	r1, r3
 8006792:	f7fe fc40 	bl	8005016 <USBD_LL_DataInStage>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fd7a 	bl	80052a6 <USBD_LL_SOF>
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	79db      	ldrb	r3, [r3, #7]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
 80067d2:	e008      	b.n	80067e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	79db      	ldrb	r3, [r3, #7]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d102      	bne.n	80067e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
 80067e0:	e001      	b.n	80067e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80067e2:	f7f9 ff95 	bl	8000710 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067ec:	7bfa      	ldrb	r2, [r7, #15]
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe fd14 	bl	800521e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fcbc 	bl	800517a <USBD_LL_Reset>
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe fd0f 	bl	800523e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	7adb      	ldrb	r3, [r3, #11]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <HAL_PCD_SuspendCallback+0x48>)
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	4a03      	ldr	r2, [pc, #12]	; (8006854 <HAL_PCD_SuspendCallback+0x48>)
 8006846:	f043 0306 	orr.w	r3, r3, #6
 800684a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	e000ed00 	.word	0xe000ed00

08006858 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fd05 	bl	8005276 <USBD_LL_Resume>
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006886:	78fa      	ldrb	r2, [r7, #3]
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fd5d 	bl	800534a <USBD_LL_IsoOUTIncomplete>
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fd19 	bl	80052e6 <USBD_LL_IsoINIncomplete>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fd6f 	bl	80053ae <USBD_LL_DevConnected>
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fd6c 	bl	80053c4 <USBD_LL_DevDisconnected>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d13c      	bne.n	800697e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006904:	4a20      	ldr	r2, [pc, #128]	; (8006988 <USBD_LL_Init+0x94>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <USBD_LL_Init+0x94>)
 8006910:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006914:	4b1c      	ldr	r3, [pc, #112]	; (8006988 <USBD_LL_Init+0x94>)
 8006916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800691a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800691c:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <USBD_LL_Init+0x94>)
 800691e:	2204      	movs	r2, #4
 8006920:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006922:	4b19      	ldr	r3, [pc, #100]	; (8006988 <USBD_LL_Init+0x94>)
 8006924:	2202      	movs	r2, #2
 8006926:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006928:	4b17      	ldr	r3, [pc, #92]	; (8006988 <USBD_LL_Init+0x94>)
 800692a:	2200      	movs	r2, #0
 800692c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800692e:	4b16      	ldr	r3, [pc, #88]	; (8006988 <USBD_LL_Init+0x94>)
 8006930:	2202      	movs	r2, #2
 8006932:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006934:	4b14      	ldr	r3, [pc, #80]	; (8006988 <USBD_LL_Init+0x94>)
 8006936:	2200      	movs	r2, #0
 8006938:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <USBD_LL_Init+0x94>)
 800693c:	2200      	movs	r2, #0
 800693e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <USBD_LL_Init+0x94>)
 8006942:	2200      	movs	r2, #0
 8006944:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006946:	4b10      	ldr	r3, [pc, #64]	; (8006988 <USBD_LL_Init+0x94>)
 8006948:	2200      	movs	r2, #0
 800694a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800694c:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <USBD_LL_Init+0x94>)
 800694e:	2200      	movs	r2, #0
 8006950:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006952:	480d      	ldr	r0, [pc, #52]	; (8006988 <USBD_LL_Init+0x94>)
 8006954:	f7fa fb09 	bl	8000f6a <HAL_PCD_Init>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800695e:	f7f9 fed7 	bl	8000710 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	4808      	ldr	r0, [pc, #32]	; (8006988 <USBD_LL_Init+0x94>)
 8006966:	f7fb fd36 	bl	80023d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800696a:	2240      	movs	r2, #64	; 0x40
 800696c:	2100      	movs	r1, #0
 800696e:	4806      	ldr	r0, [pc, #24]	; (8006988 <USBD_LL_Init+0x94>)
 8006970:	f7fb fcea 	bl	8002348 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006974:	2280      	movs	r2, #128	; 0x80
 8006976:	2101      	movs	r1, #1
 8006978:	4803      	ldr	r0, [pc, #12]	; (8006988 <USBD_LL_Init+0x94>)
 800697a:	f7fb fce5 	bl	8002348 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20001600 	.word	0x20001600

0800698c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fa fbf0 	bl	8001188 <HAL_PCD_Start>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f942 	bl	8006c38 <USBD_Get_USB_Status>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	4608      	mov	r0, r1
 80069cc:	4611      	mov	r1, r2
 80069ce:	461a      	mov	r2, r3
 80069d0:	4603      	mov	r3, r0
 80069d2:	70fb      	strb	r3, [r7, #3]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70bb      	strb	r3, [r7, #2]
 80069d8:	4613      	mov	r3, r2
 80069da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80069ea:	78bb      	ldrb	r3, [r7, #2]
 80069ec:	883a      	ldrh	r2, [r7, #0]
 80069ee:	78f9      	ldrb	r1, [r7, #3]
 80069f0:	f7fb f8c4 	bl	8001b7c <HAL_PCD_EP_Open>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 f91c 	bl	8006c38 <USBD_Get_USB_Status>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a28:	78fa      	ldrb	r2, [r7, #3]
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fb f90f 	bl	8001c50 <HAL_PCD_EP_Close>
 8006a32:	4603      	mov	r3, r0
 8006a34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f8fd 	bl	8006c38 <USBD_Get_USB_Status>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fb f9c7 	bl	8001dfe <HAL_PCD_EP_SetStall>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f8de 	bl	8006c38 <USBD_Get_USB_Status>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fb fa0b 	bl	8001ec4 <HAL_PCD_EP_ClrStall>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 f8bf 	bl	8006c38 <USBD_Get_USB_Status>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da0b      	bge.n	8006afc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	4613      	mov	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	3316      	adds	r3, #22
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	e00b      	b.n	8006b14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b02:	68f9      	ldr	r1, [r7, #12]
 8006b04:	4613      	mov	r3, r2
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8006b12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fa fff8 	bl	8001b34 <HAL_PCD_SetAddress>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 f874 	bl	8006c38 <USBD_Get_USB_Status>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006b7c:	7af9      	ldrb	r1, [r7, #11]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	f7fb f902 	bl	8001d8a <HAL_PCD_EP_Transmit>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f853 	bl	8006c38 <USBD_Get_USB_Status>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b96:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	460b      	mov	r3, r1
 8006bae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006bbe:	7af9      	ldrb	r1, [r7, #11]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f7fb f88e 	bl	8001ce4 <HAL_PCD_EP_Receive>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f832 	bl	8006c38 <USBD_Get_USB_Status>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fb f8ae 	bl	8001d5a <HAL_PCD_EP_GetRxCount>
 8006bfe:	4603      	mov	r3, r0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006c10:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <USBD_static_malloc+0x18>)
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20001ae4 	.word	0x20001ae4

08006c24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]

}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d817      	bhi.n	8006c7c <USBD_Get_USB_Status+0x44>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <USBD_Get_USB_Status+0x1c>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c65 	.word	0x08006c65
 8006c58:	08006c6b 	.word	0x08006c6b
 8006c5c:	08006c71 	.word	0x08006c71
 8006c60:	08006c77 	.word	0x08006c77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
    break;
 8006c68:	e00b      	b.n	8006c82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6e:	e008      	b.n	8006c82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
    break;
 8006c74:	e005      	b.n	8006c82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c76:	2303      	movs	r3, #3
 8006c78:	73fb      	strb	r3, [r7, #15]
    break;
 8006c7a:	e002      	b.n	8006c82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c80:	bf00      	nop
  }
  return usb_status;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <memset>:
 8006c90:	4402      	add	r2, r0
 8006c92:	4603      	mov	r3, r0
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d100      	bne.n	8006c9a <memset+0xa>
 8006c98:	4770      	bx	lr
 8006c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9e:	e7f9      	b.n	8006c94 <memset+0x4>

08006ca0 <__libc_init_array>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	4d0d      	ldr	r5, [pc, #52]	; (8006cd8 <__libc_init_array+0x38>)
 8006ca4:	4c0d      	ldr	r4, [pc, #52]	; (8006cdc <__libc_init_array+0x3c>)
 8006ca6:	1b64      	subs	r4, r4, r5
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	2600      	movs	r6, #0
 8006cac:	42a6      	cmp	r6, r4
 8006cae:	d109      	bne.n	8006cc4 <__libc_init_array+0x24>
 8006cb0:	4d0b      	ldr	r5, [pc, #44]	; (8006ce0 <__libc_init_array+0x40>)
 8006cb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ce4 <__libc_init_array+0x44>)
 8006cb4:	f000 f818 	bl	8006ce8 <_init>
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	42a6      	cmp	r6, r4
 8006cc0:	d105      	bne.n	8006cce <__libc_init_array+0x2e>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc8:	4798      	blx	r3
 8006cca:	3601      	adds	r6, #1
 8006ccc:	e7ee      	b.n	8006cac <__libc_init_array+0xc>
 8006cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd2:	4798      	blx	r3
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	e7f2      	b.n	8006cbe <__libc_init_array+0x1e>
 8006cd8:	08006d60 	.word	0x08006d60
 8006cdc:	08006d60 	.word	0x08006d60
 8006ce0:	08006d60 	.word	0x08006d60
 8006ce4:	08006d64 	.word	0x08006d64

08006ce8 <_init>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	bf00      	nop
 8006cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cee:	bc08      	pop	{r3}
 8006cf0:	469e      	mov	lr, r3
 8006cf2:	4770      	bx	lr

08006cf4 <_fini>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	bf00      	nop
 8006cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfa:	bc08      	pop	{r3}
 8006cfc:	469e      	mov	lr, r3
 8006cfe:	4770      	bx	lr
